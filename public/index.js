/* Generated by Spago v0.93.41 */
(() => {
  // output/Control.Semigroupoid/index.js
  var semigroupoidFn = {
    compose: function(f) {
      return function(g) {
        return function(x) {
          return f(g(x));
        };
      };
    }
  };
  var compose = function(dict) {
    return dict.compose;
  };

  // output/Control.Category/index.js
  var identity = function(dict) {
    return dict.identity;
  };
  var categoryFn = {
    identity: function(x) {
      return x;
    },
    Semigroupoid0: function() {
      return semigroupoidFn;
    }
  };

  // output/Data.Function/index.js
  var flip = function(f) {
    return function(b) {
      return function(a) {
        return f(a)(b);
      };
    };
  };
  var $$const = function(a) {
    return function(v) {
      return a;
    };
  };

  // output/Data.Unit/foreign.js
  var unit = void 0;

  // output/Data.Functor/index.js
  var map = function(dict) {
    return dict.map;
  };
  var mapFlipped = function(dictFunctor) {
    var map12 = map(dictFunctor);
    return function(fa) {
      return function(f) {
        return map12(f)(fa);
      };
    };
  };
  var $$void = function(dictFunctor) {
    return map(dictFunctor)($$const(unit));
  };
  var functorFn = {
    map: /* @__PURE__ */ compose(semigroupoidFn)
  };

  // output/Control.Apply/index.js
  var identity2 = /* @__PURE__ */ identity(categoryFn);
  var applyFn = {
    apply: function(f) {
      return function(g) {
        return function(x) {
          return f(x)(g(x));
        };
      };
    },
    Functor0: function() {
      return functorFn;
    }
  };
  var apply = function(dict) {
    return dict.apply;
  };
  var applySecond = function(dictApply) {
    var apply1 = apply(dictApply);
    var map9 = map(dictApply.Functor0());
    return function(a) {
      return function(b) {
        return apply1(map9($$const(identity2))(a))(b);
      };
    };
  };
  var lift2 = function(dictApply) {
    var apply1 = apply(dictApply);
    var map9 = map(dictApply.Functor0());
    return function(f) {
      return function(a) {
        return function(b) {
          return apply1(map9(f)(a))(b);
        };
      };
    };
  };

  // output/Control.Applicative/index.js
  var pure = function(dict) {
    return dict.pure;
  };
  var liftA1 = function(dictApplicative) {
    var apply3 = apply(dictApplicative.Apply0());
    var pure13 = pure(dictApplicative);
    return function(f) {
      return function(a) {
        return apply3(pure13(f))(a);
      };
    };
  };
  var applicativeFn = {
    pure: function(x) {
      return function(v) {
        return x;
      };
    },
    Apply0: function() {
      return applyFn;
    }
  };

  // output/Control.Bind/index.js
  var identity3 = /* @__PURE__ */ identity(categoryFn);
  var discard = function(dict) {
    return dict.discard;
  };
  var bind = function(dict) {
    return dict.bind;
  };
  var bindFlipped = function(dictBind) {
    return flip(bind(dictBind));
  };
  var composeKleisliFlipped = function(dictBind) {
    var bindFlipped1 = bindFlipped(dictBind);
    return function(f) {
      return function(g) {
        return function(a) {
          return bindFlipped1(f)(g(a));
        };
      };
    };
  };
  var discardUnit = {
    discard: function(dictBind) {
      return bind(dictBind);
    }
  };
  var join = function(dictBind) {
    var bind12 = bind(dictBind);
    return function(m) {
      return bind12(m)(identity3);
    };
  };

  // output/Data.Foldable/foreign.js
  var foldrArray = function(f) {
    return function(init) {
      return function(xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };
  var foldlArray = function(f) {
    return function(init) {
      return function(xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };

  // output/Data.Semigroup/foreign.js
  var concatArray = function(xs) {
    return function(ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };

  // output/Data.Semigroup/index.js
  var semigroupUnit = {
    append: function(v) {
      return function(v1) {
        return unit;
      };
    }
  };
  var semigroupArray = {
    append: concatArray
  };
  var append = function(dict) {
    return dict.append;
  };

  // output/Data.Bounded/foreign.js
  var topChar = String.fromCharCode(65535);
  var bottomChar = String.fromCharCode(0);
  var topNumber = Number.POSITIVE_INFINITY;
  var bottomNumber = Number.NEGATIVE_INFINITY;

  // output/Data.Maybe/index.js
  var identity4 = /* @__PURE__ */ identity(categoryFn);
  var Nothing = /* @__PURE__ */ function() {
    function Nothing2() {
    }
    ;
    Nothing2.value = new Nothing2();
    return Nothing2;
  }();
  var Just = /* @__PURE__ */ function() {
    function Just2(value0) {
      this.value0 = value0;
    }
    ;
    Just2.create = function(value0) {
      return new Just2(value0);
    };
    return Just2;
  }();
  var maybe = function(v) {
    return function(v1) {
      return function(v2) {
        if (v2 instanceof Nothing) {
          return v;
        }
        ;
        if (v2 instanceof Just) {
          return v1(v2.value0);
        }
        ;
        throw new Error("Failed pattern match at Data.Maybe (line 237, column 1 - line 237, column 51): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
      };
    };
  };
  var functorMaybe = {
    map: function(v) {
      return function(v1) {
        if (v1 instanceof Just) {
          return new Just(v(v1.value0));
        }
        ;
        return Nothing.value;
      };
    }
  };
  var fromMaybe = function(a) {
    return maybe(a)(identity4);
  };

  // output/Data.Either/index.js
  var Left = /* @__PURE__ */ function() {
    function Left2(value0) {
      this.value0 = value0;
    }
    ;
    Left2.create = function(value0) {
      return new Left2(value0);
    };
    return Left2;
  }();
  var Right = /* @__PURE__ */ function() {
    function Right2(value0) {
      this.value0 = value0;
    }
    ;
    Right2.create = function(value0) {
      return new Right2(value0);
    };
    return Right2;
  }();

  // output/Data.Monoid/index.js
  var monoidUnit = {
    mempty: unit,
    Semigroup0: function() {
      return semigroupUnit;
    }
  };
  var monoidArray = {
    mempty: [],
    Semigroup0: function() {
      return semigroupArray;
    }
  };
  var mempty = function(dict) {
    return dict.mempty;
  };

  // output/Data.Tuple/index.js
  var Tuple = /* @__PURE__ */ function() {
    function Tuple2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Tuple2.create = function(value0) {
      return function(value1) {
        return new Tuple2(value0, value1);
      };
    };
    return Tuple2;
  }();
  var snd = function(v) {
    return v.value1;
  };
  var fst = function(v) {
    return v.value0;
  };

  // output/Data.Bifunctor/index.js
  var bimap = function(dict) {
    return dict.bimap;
  };
  var bifunctorEither = {
    bimap: function(v) {
      return function(v1) {
        return function(v2) {
          if (v2 instanceof Left) {
            return new Left(v(v2.value0));
          }
          ;
          if (v2 instanceof Right) {
            return new Right(v1(v2.value0));
          }
          ;
          throw new Error("Failed pattern match at Data.Bifunctor (line 32, column 1 - line 34, column 36): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
        };
      };
    }
  };

  // output/Unsafe.Coerce/foreign.js
  var unsafeCoerce2 = function(x) {
    return x;
  };

  // output/Safe.Coerce/index.js
  var coerce = function() {
    return unsafeCoerce2;
  };

  // output/Data.Newtype/index.js
  var coerce2 = /* @__PURE__ */ coerce();
  var unwrap = function() {
    return coerce2;
  };

  // output/Data.Foldable/index.js
  var foldr = function(dict) {
    return dict.foldr;
  };
  var traverse_ = function(dictApplicative) {
    var applySecond3 = applySecond(dictApplicative.Apply0());
    var pure8 = pure(dictApplicative);
    return function(dictFoldable) {
      var foldr22 = foldr(dictFoldable);
      return function(f) {
        return foldr22(function($454) {
          return applySecond3(f($454));
        })(pure8(unit));
      };
    };
  };
  var foldableMaybe = {
    foldr: function(v) {
      return function(v1) {
        return function(v2) {
          if (v2 instanceof Nothing) {
            return v1;
          }
          ;
          if (v2 instanceof Just) {
            return v(v2.value0)(v1);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
        };
      };
    },
    foldl: function(v) {
      return function(v1) {
        return function(v2) {
          if (v2 instanceof Nothing) {
            return v1;
          }
          ;
          if (v2 instanceof Just) {
            return v(v1)(v2.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
        };
      };
    },
    foldMap: function(dictMonoid) {
      var mempty4 = mempty(dictMonoid);
      return function(v) {
        return function(v1) {
          if (v1 instanceof Nothing) {
            return mempty4;
          }
          ;
          if (v1 instanceof Just) {
            return v(v1.value0);
          }
          ;
          throw new Error("Failed pattern match at Data.Foldable (line 138, column 1 - line 144, column 27): " + [v.constructor.name, v1.constructor.name]);
        };
      };
    }
  };
  var foldMapDefaultR = function(dictFoldable) {
    var foldr22 = foldr(dictFoldable);
    return function(dictMonoid) {
      var append4 = append(dictMonoid.Semigroup0());
      var mempty4 = mempty(dictMonoid);
      return function(f) {
        return foldr22(function(x) {
          return function(acc) {
            return append4(f(x))(acc);
          };
        })(mempty4);
      };
    };
  };
  var foldableArray = {
    foldr: foldrArray,
    foldl: foldlArray,
    foldMap: function(dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
    }
  };

  // output/Effect.Aff/foreign.js
  var Aff = function() {
    var EMPTY = {};
    var PURE = "Pure";
    var THROW = "Throw";
    var CATCH = "Catch";
    var SYNC = "Sync";
    var ASYNC = "Async";
    var BIND = "Bind";
    var BRACKET = "Bracket";
    var FORK = "Fork";
    var SEQ = "Sequential";
    var MAP = "Map";
    var APPLY = "Apply";
    var ALT = "Alt";
    var CONS = "Cons";
    var RESUME = "Resume";
    var RELEASE = "Release";
    var FINALIZER = "Finalizer";
    var FINALIZED = "Finalized";
    var FORKED = "Forked";
    var FIBER = "Fiber";
    var THUNK = "Thunk";
    function Aff2(tag, _1, _2, _3) {
      this.tag = tag;
      this._1 = _1;
      this._2 = _2;
      this._3 = _3;
    }
    function AffCtr(tag) {
      var fn = function(_1, _2, _3) {
        return new Aff2(tag, _1, _2, _3);
      };
      fn.tag = tag;
      return fn;
    }
    function nonCanceler2(error2) {
      return new Aff2(PURE, void 0);
    }
    function runEff(eff) {
      try {
        eff();
      } catch (error2) {
        setTimeout(function() {
          throw error2;
        }, 0);
      }
    }
    function runSync(left, right, eff) {
      try {
        return right(eff());
      } catch (error2) {
        return left(error2);
      }
    }
    function runAsync(left, eff, k) {
      try {
        return eff(k)();
      } catch (error2) {
        k(left(error2))();
        return nonCanceler2;
      }
    }
    var Scheduler = function() {
      var limit = 1024;
      var size3 = 0;
      var ix = 0;
      var queue = new Array(limit);
      var draining = false;
      function drain() {
        var thunk;
        draining = true;
        while (size3 !== 0) {
          size3--;
          thunk = queue[ix];
          queue[ix] = void 0;
          ix = (ix + 1) % limit;
          thunk();
        }
        draining = false;
      }
      return {
        isDraining: function() {
          return draining;
        },
        enqueue: function(cb) {
          var i, tmp;
          if (size3 === limit) {
            tmp = draining;
            drain();
            draining = tmp;
          }
          queue[(ix + size3) % limit] = cb;
          size3++;
          if (!draining) {
            drain();
          }
        }
      };
    }();
    function Supervisor(util) {
      var fibers = {};
      var fiberId = 0;
      var count = 0;
      return {
        register: function(fiber) {
          var fid = fiberId++;
          fiber.onComplete({
            rethrow: true,
            handler: function(result) {
              return function() {
                count--;
                delete fibers[fid];
              };
            }
          })();
          fibers[fid] = fiber;
          count++;
        },
        isEmpty: function() {
          return count === 0;
        },
        killAll: function(killError, cb) {
          return function() {
            if (count === 0) {
              return cb();
            }
            var killCount = 0;
            var kills = {};
            function kill(fid) {
              kills[fid] = fibers[fid].kill(killError, function(result) {
                return function() {
                  delete kills[fid];
                  killCount--;
                  if (util.isLeft(result) && util.fromLeft(result)) {
                    setTimeout(function() {
                      throw util.fromLeft(result);
                    }, 0);
                  }
                  if (killCount === 0) {
                    cb();
                  }
                };
              })();
            }
            for (var k in fibers) {
              if (fibers.hasOwnProperty(k)) {
                killCount++;
                kill(k);
              }
            }
            fibers = {};
            fiberId = 0;
            count = 0;
            return function(error2) {
              return new Aff2(SYNC, function() {
                for (var k2 in kills) {
                  if (kills.hasOwnProperty(k2)) {
                    kills[k2]();
                  }
                }
              });
            };
          };
        }
      };
    }
    var SUSPENDED = 0;
    var CONTINUE = 1;
    var STEP_BIND = 2;
    var STEP_RESULT = 3;
    var PENDING = 4;
    var RETURN = 5;
    var COMPLETED = 6;
    function Fiber(util, supervisor, aff) {
      var runTick = 0;
      var status = SUSPENDED;
      var step2 = aff;
      var fail = null;
      var interrupt = null;
      var bhead = null;
      var btail = null;
      var attempts = null;
      var bracketCount = 0;
      var joinId = 0;
      var joins = null;
      var rethrow = true;
      function run3(localRunTick) {
        var tmp, result, attempt;
        while (true) {
          tmp = null;
          result = null;
          attempt = null;
          switch (status) {
            case STEP_BIND:
              status = CONTINUE;
              try {
                step2 = bhead(step2);
                if (btail === null) {
                  bhead = null;
                } else {
                  bhead = btail._1;
                  btail = btail._2;
                }
              } catch (e) {
                status = RETURN;
                fail = util.left(e);
                step2 = null;
              }
              break;
            case STEP_RESULT:
              if (util.isLeft(step2)) {
                status = RETURN;
                fail = step2;
                step2 = null;
              } else if (bhead === null) {
                status = RETURN;
              } else {
                status = STEP_BIND;
                step2 = util.fromRight(step2);
              }
              break;
            case CONTINUE:
              switch (step2.tag) {
                case BIND:
                  if (bhead) {
                    btail = new Aff2(CONS, bhead, btail);
                  }
                  bhead = step2._2;
                  status = CONTINUE;
                  step2 = step2._1;
                  break;
                case PURE:
                  if (bhead === null) {
                    status = RETURN;
                    step2 = util.right(step2._1);
                  } else {
                    status = STEP_BIND;
                    step2 = step2._1;
                  }
                  break;
                case SYNC:
                  status = STEP_RESULT;
                  step2 = runSync(util.left, util.right, step2._1);
                  break;
                case ASYNC:
                  status = PENDING;
                  step2 = runAsync(util.left, step2._1, function(result2) {
                    return function() {
                      if (runTick !== localRunTick) {
                        return;
                      }
                      runTick++;
                      Scheduler.enqueue(function() {
                        if (runTick !== localRunTick + 1) {
                          return;
                        }
                        status = STEP_RESULT;
                        step2 = result2;
                        run3(runTick);
                      });
                    };
                  });
                  return;
                case THROW:
                  status = RETURN;
                  fail = util.left(step2._1);
                  step2 = null;
                  break;
                // Enqueue the Catch so that we can call the error handler later on
                // in case of an exception.
                case CATCH:
                  if (bhead === null) {
                    attempts = new Aff2(CONS, step2, attempts, interrupt);
                  } else {
                    attempts = new Aff2(CONS, step2, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                  }
                  bhead = null;
                  btail = null;
                  status = CONTINUE;
                  step2 = step2._1;
                  break;
                // Enqueue the Bracket so that we can call the appropriate handlers
                // after resource acquisition.
                case BRACKET:
                  bracketCount++;
                  if (bhead === null) {
                    attempts = new Aff2(CONS, step2, attempts, interrupt);
                  } else {
                    attempts = new Aff2(CONS, step2, new Aff2(CONS, new Aff2(RESUME, bhead, btail), attempts, interrupt), interrupt);
                  }
                  bhead = null;
                  btail = null;
                  status = CONTINUE;
                  step2 = step2._1;
                  break;
                case FORK:
                  status = STEP_RESULT;
                  tmp = Fiber(util, supervisor, step2._2);
                  if (supervisor) {
                    supervisor.register(tmp);
                  }
                  if (step2._1) {
                    tmp.run();
                  }
                  step2 = util.right(tmp);
                  break;
                case SEQ:
                  status = CONTINUE;
                  step2 = sequential2(util, supervisor, step2._1);
                  break;
              }
              break;
            case RETURN:
              bhead = null;
              btail = null;
              if (attempts === null) {
                status = COMPLETED;
                step2 = interrupt || fail || step2;
              } else {
                tmp = attempts._3;
                attempt = attempts._1;
                attempts = attempts._2;
                switch (attempt.tag) {
                  // We cannot recover from an unmasked interrupt. Otherwise we should
                  // continue stepping, or run the exception handler if an exception
                  // was raised.
                  case CATCH:
                    if (interrupt && interrupt !== tmp && bracketCount === 0) {
                      status = RETURN;
                    } else if (fail) {
                      status = CONTINUE;
                      step2 = attempt._2(util.fromLeft(fail));
                      fail = null;
                    }
                    break;
                  // We cannot resume from an unmasked interrupt or exception.
                  case RESUME:
                    if (interrupt && interrupt !== tmp && bracketCount === 0 || fail) {
                      status = RETURN;
                    } else {
                      bhead = attempt._1;
                      btail = attempt._2;
                      status = STEP_BIND;
                      step2 = util.fromRight(step2);
                    }
                    break;
                  // If we have a bracket, we should enqueue the handlers,
                  // and continue with the success branch only if the fiber has
                  // not been interrupted. If the bracket acquisition failed, we
                  // should not run either.
                  case BRACKET:
                    bracketCount--;
                    if (fail === null) {
                      result = util.fromRight(step2);
                      attempts = new Aff2(CONS, new Aff2(RELEASE, attempt._2, result), attempts, tmp);
                      if (interrupt === tmp || bracketCount > 0) {
                        status = CONTINUE;
                        step2 = attempt._3(result);
                      }
                    }
                    break;
                  // Enqueue the appropriate handler. We increase the bracket count
                  // because it should not be cancelled.
                  case RELEASE:
                    attempts = new Aff2(CONS, new Aff2(FINALIZED, step2, fail), attempts, interrupt);
                    status = CONTINUE;
                    if (interrupt && interrupt !== tmp && bracketCount === 0) {
                      step2 = attempt._1.killed(util.fromLeft(interrupt))(attempt._2);
                    } else if (fail) {
                      step2 = attempt._1.failed(util.fromLeft(fail))(attempt._2);
                    } else {
                      step2 = attempt._1.completed(util.fromRight(step2))(attempt._2);
                    }
                    fail = null;
                    bracketCount++;
                    break;
                  case FINALIZER:
                    bracketCount++;
                    attempts = new Aff2(CONS, new Aff2(FINALIZED, step2, fail), attempts, interrupt);
                    status = CONTINUE;
                    step2 = attempt._1;
                    break;
                  case FINALIZED:
                    bracketCount--;
                    status = RETURN;
                    step2 = attempt._1;
                    fail = attempt._2;
                    break;
                }
              }
              break;
            case COMPLETED:
              for (var k in joins) {
                if (joins.hasOwnProperty(k)) {
                  rethrow = rethrow && joins[k].rethrow;
                  runEff(joins[k].handler(step2));
                }
              }
              joins = null;
              if (interrupt && fail) {
                setTimeout(function() {
                  throw util.fromLeft(fail);
                }, 0);
              } else if (util.isLeft(step2) && rethrow) {
                setTimeout(function() {
                  if (rethrow) {
                    throw util.fromLeft(step2);
                  }
                }, 0);
              }
              return;
            case SUSPENDED:
              status = CONTINUE;
              break;
            case PENDING:
              return;
          }
        }
      }
      function onComplete(join4) {
        return function() {
          if (status === COMPLETED) {
            rethrow = rethrow && join4.rethrow;
            join4.handler(step2)();
            return function() {
            };
          }
          var jid = joinId++;
          joins = joins || {};
          joins[jid] = join4;
          return function() {
            if (joins !== null) {
              delete joins[jid];
            }
          };
        };
      }
      function kill(error2, cb) {
        return function() {
          if (status === COMPLETED) {
            cb(util.right(void 0))();
            return function() {
            };
          }
          var canceler = onComplete({
            rethrow: false,
            handler: function() {
              return cb(util.right(void 0));
            }
          })();
          switch (status) {
            case SUSPENDED:
              interrupt = util.left(error2);
              status = COMPLETED;
              step2 = interrupt;
              run3(runTick);
              break;
            case PENDING:
              if (interrupt === null) {
                interrupt = util.left(error2);
              }
              if (bracketCount === 0) {
                if (status === PENDING) {
                  attempts = new Aff2(CONS, new Aff2(FINALIZER, step2(error2)), attempts, interrupt);
                }
                status = RETURN;
                step2 = null;
                fail = null;
                run3(++runTick);
              }
              break;
            default:
              if (interrupt === null) {
                interrupt = util.left(error2);
              }
              if (bracketCount === 0) {
                status = RETURN;
                step2 = null;
                fail = null;
              }
          }
          return canceler;
        };
      }
      function join3(cb) {
        return function() {
          var canceler = onComplete({
            rethrow: false,
            handler: cb
          })();
          if (status === SUSPENDED) {
            run3(runTick);
          }
          return canceler;
        };
      }
      return {
        kill,
        join: join3,
        onComplete,
        isSuspended: function() {
          return status === SUSPENDED;
        },
        run: function() {
          if (status === SUSPENDED) {
            if (!Scheduler.isDraining()) {
              Scheduler.enqueue(function() {
                run3(runTick);
              });
            } else {
              run3(runTick);
            }
          }
        }
      };
    }
    function runPar(util, supervisor, par, cb) {
      var fiberId = 0;
      var fibers = {};
      var killId = 0;
      var kills = {};
      var early = new Error("[ParAff] Early exit");
      var interrupt = null;
      var root = EMPTY;
      function kill(error2, par2, cb2) {
        var step2 = par2;
        var head = null;
        var tail = null;
        var count = 0;
        var kills2 = {};
        var tmp, kid;
        loop: while (true) {
          tmp = null;
          switch (step2.tag) {
            case FORKED:
              if (step2._3 === EMPTY) {
                tmp = fibers[step2._1];
                kills2[count++] = tmp.kill(error2, function(result) {
                  return function() {
                    count--;
                    if (count === 0) {
                      cb2(result)();
                    }
                  };
                });
              }
              if (head === null) {
                break loop;
              }
              step2 = head._2;
              if (tail === null) {
                head = null;
              } else {
                head = tail._1;
                tail = tail._2;
              }
              break;
            case MAP:
              step2 = step2._2;
              break;
            case APPLY:
            case ALT:
              if (head) {
                tail = new Aff2(CONS, head, tail);
              }
              head = step2;
              step2 = step2._1;
              break;
          }
        }
        if (count === 0) {
          cb2(util.right(void 0))();
        } else {
          kid = 0;
          tmp = count;
          for (; kid < tmp; kid++) {
            kills2[kid] = kills2[kid]();
          }
        }
        return kills2;
      }
      function join3(result, head, tail) {
        var fail, step2, lhs, rhs, tmp, kid;
        if (util.isLeft(result)) {
          fail = result;
          step2 = null;
        } else {
          step2 = result;
          fail = null;
        }
        loop: while (true) {
          lhs = null;
          rhs = null;
          tmp = null;
          kid = null;
          if (interrupt !== null) {
            return;
          }
          if (head === null) {
            cb(fail || step2)();
            return;
          }
          if (head._3 !== EMPTY) {
            return;
          }
          switch (head.tag) {
            case MAP:
              if (fail === null) {
                head._3 = util.right(head._1(util.fromRight(step2)));
                step2 = head._3;
              } else {
                head._3 = fail;
              }
              break;
            case APPLY:
              lhs = head._1._3;
              rhs = head._2._3;
              if (fail) {
                head._3 = fail;
                tmp = true;
                kid = killId++;
                kills[kid] = kill(early, fail === lhs ? head._2 : head._1, function() {
                  return function() {
                    delete kills[kid];
                    if (tmp) {
                      tmp = false;
                    } else if (tail === null) {
                      join3(fail, null, null);
                    } else {
                      join3(fail, tail._1, tail._2);
                    }
                  };
                });
                if (tmp) {
                  tmp = false;
                  return;
                }
              } else if (lhs === EMPTY || rhs === EMPTY) {
                return;
              } else {
                step2 = util.right(util.fromRight(lhs)(util.fromRight(rhs)));
                head._3 = step2;
              }
              break;
            case ALT:
              lhs = head._1._3;
              rhs = head._2._3;
              if (lhs === EMPTY && util.isLeft(rhs) || rhs === EMPTY && util.isLeft(lhs)) {
                return;
              }
              if (lhs !== EMPTY && util.isLeft(lhs) && rhs !== EMPTY && util.isLeft(rhs)) {
                fail = step2 === lhs ? rhs : lhs;
                step2 = null;
                head._3 = fail;
              } else {
                head._3 = step2;
                tmp = true;
                kid = killId++;
                kills[kid] = kill(early, step2 === lhs ? head._2 : head._1, function() {
                  return function() {
                    delete kills[kid];
                    if (tmp) {
                      tmp = false;
                    } else if (tail === null) {
                      join3(step2, null, null);
                    } else {
                      join3(step2, tail._1, tail._2);
                    }
                  };
                });
                if (tmp) {
                  tmp = false;
                  return;
                }
              }
              break;
          }
          if (tail === null) {
            head = null;
          } else {
            head = tail._1;
            tail = tail._2;
          }
        }
      }
      function resolve(fiber) {
        return function(result) {
          return function() {
            delete fibers[fiber._1];
            fiber._3 = result;
            join3(result, fiber._2._1, fiber._2._2);
          };
        };
      }
      function run3() {
        var status = CONTINUE;
        var step2 = par;
        var head = null;
        var tail = null;
        var tmp, fid;
        loop: while (true) {
          tmp = null;
          fid = null;
          switch (status) {
            case CONTINUE:
              switch (step2.tag) {
                case MAP:
                  if (head) {
                    tail = new Aff2(CONS, head, tail);
                  }
                  head = new Aff2(MAP, step2._1, EMPTY, EMPTY);
                  step2 = step2._2;
                  break;
                case APPLY:
                  if (head) {
                    tail = new Aff2(CONS, head, tail);
                  }
                  head = new Aff2(APPLY, EMPTY, step2._2, EMPTY);
                  step2 = step2._1;
                  break;
                case ALT:
                  if (head) {
                    tail = new Aff2(CONS, head, tail);
                  }
                  head = new Aff2(ALT, EMPTY, step2._2, EMPTY);
                  step2 = step2._1;
                  break;
                default:
                  fid = fiberId++;
                  status = RETURN;
                  tmp = step2;
                  step2 = new Aff2(FORKED, fid, new Aff2(CONS, head, tail), EMPTY);
                  tmp = Fiber(util, supervisor, tmp);
                  tmp.onComplete({
                    rethrow: false,
                    handler: resolve(step2)
                  })();
                  fibers[fid] = tmp;
                  if (supervisor) {
                    supervisor.register(tmp);
                  }
              }
              break;
            case RETURN:
              if (head === null) {
                break loop;
              }
              if (head._1 === EMPTY) {
                head._1 = step2;
                status = CONTINUE;
                step2 = head._2;
                head._2 = EMPTY;
              } else {
                head._2 = step2;
                step2 = head;
                if (tail === null) {
                  head = null;
                } else {
                  head = tail._1;
                  tail = tail._2;
                }
              }
          }
        }
        root = step2;
        for (fid = 0; fid < fiberId; fid++) {
          fibers[fid].run();
        }
      }
      function cancel(error2, cb2) {
        interrupt = util.left(error2);
        var innerKills;
        for (var kid in kills) {
          if (kills.hasOwnProperty(kid)) {
            innerKills = kills[kid];
            for (kid in innerKills) {
              if (innerKills.hasOwnProperty(kid)) {
                innerKills[kid]();
              }
            }
          }
        }
        kills = null;
        var newKills = kill(error2, root, cb2);
        return function(killError) {
          return new Aff2(ASYNC, function(killCb) {
            return function() {
              for (var kid2 in newKills) {
                if (newKills.hasOwnProperty(kid2)) {
                  newKills[kid2]();
                }
              }
              return nonCanceler2;
            };
          });
        };
      }
      run3();
      return function(killError) {
        return new Aff2(ASYNC, function(killCb) {
          return function() {
            return cancel(killError, killCb);
          };
        });
      };
    }
    function sequential2(util, supervisor, par) {
      return new Aff2(ASYNC, function(cb) {
        return function() {
          return runPar(util, supervisor, par, cb);
        };
      });
    }
    Aff2.EMPTY = EMPTY;
    Aff2.Pure = AffCtr(PURE);
    Aff2.Throw = AffCtr(THROW);
    Aff2.Catch = AffCtr(CATCH);
    Aff2.Sync = AffCtr(SYNC);
    Aff2.Async = AffCtr(ASYNC);
    Aff2.Bind = AffCtr(BIND);
    Aff2.Bracket = AffCtr(BRACKET);
    Aff2.Fork = AffCtr(FORK);
    Aff2.Seq = AffCtr(SEQ);
    Aff2.ParMap = AffCtr(MAP);
    Aff2.ParApply = AffCtr(APPLY);
    Aff2.ParAlt = AffCtr(ALT);
    Aff2.Fiber = Fiber;
    Aff2.Supervisor = Supervisor;
    Aff2.Scheduler = Scheduler;
    Aff2.nonCanceler = nonCanceler2;
    return Aff2;
  }();
  var _pure = Aff.Pure;
  var _throwError = Aff.Throw;
  function _map(f) {
    return function(aff) {
      if (aff.tag === Aff.Pure.tag) {
        return Aff.Pure(f(aff._1));
      } else {
        return Aff.Bind(aff, function(value12) {
          return Aff.Pure(f(value12));
        });
      }
    };
  }
  function _bind(aff) {
    return function(k) {
      return Aff.Bind(aff, k);
    };
  }
  var _liftEffect = Aff.Sync;
  function _parAffMap(f) {
    return function(aff) {
      return Aff.ParMap(f, aff);
    };
  }
  function _parAffApply(aff1) {
    return function(aff2) {
      return Aff.ParApply(aff1, aff2);
    };
  }
  var makeAff = Aff.Async;
  function _makeFiber(util, aff) {
    return function() {
      return Aff.Fiber(util, null, aff);
    };
  }
  var _sequential = Aff.Seq;

  // output/Control.Monad/index.js
  var ap = function(dictMonad) {
    var bind3 = bind(dictMonad.Bind1());
    var pure8 = pure(dictMonad.Applicative0());
    return function(f) {
      return function(a) {
        return bind3(f)(function(f$prime) {
          return bind3(a)(function(a$prime) {
            return pure8(f$prime(a$prime));
          });
        });
      };
    };
  };

  // output/Effect/foreign.js
  var pureE = function(a) {
    return function() {
      return a;
    };
  };
  var bindE = function(a) {
    return function(f) {
      return function() {
        return f(a())();
      };
    };
  };

  // output/Effect/index.js
  var $runtime_lazy = function(name16, moduleName, init) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2) return val;
      if (state3 === 1) throw new ReferenceError(name16 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init();
      state3 = 2;
      return val;
    };
  };
  var monadEffect = {
    Applicative0: function() {
      return applicativeEffect;
    },
    Bind1: function() {
      return bindEffect;
    }
  };
  var bindEffect = {
    bind: bindE,
    Apply0: function() {
      return $lazy_applyEffect(0);
    }
  };
  var applicativeEffect = {
    pure: pureE,
    Apply0: function() {
      return $lazy_applyEffect(0);
    }
  };
  var $lazy_functorEffect = /* @__PURE__ */ $runtime_lazy("functorEffect", "Effect", function() {
    return {
      map: liftA1(applicativeEffect)
    };
  });
  var $lazy_applyEffect = /* @__PURE__ */ $runtime_lazy("applyEffect", "Effect", function() {
    return {
      apply: ap(monadEffect),
      Functor0: function() {
        return $lazy_functorEffect(0);
      }
    };
  });
  var functorEffect = /* @__PURE__ */ $lazy_functorEffect(20);
  var applyEffect = /* @__PURE__ */ $lazy_applyEffect(23);
  var lift22 = /* @__PURE__ */ lift2(applyEffect);
  var semigroupEffect = function(dictSemigroup) {
    return {
      append: lift22(append(dictSemigroup))
    };
  };
  var monoidEffect = function(dictMonoid) {
    var semigroupEffect1 = semigroupEffect(dictMonoid.Semigroup0());
    return {
      mempty: pureE(mempty(dictMonoid)),
      Semigroup0: function() {
        return semigroupEffect1;
      }
    };
  };

  // output/Data.Identity/index.js
  var functorIdentity = {
    map: function(f) {
      return function(m) {
        return f(m);
      };
    }
  };

  // output/Effect.Ref/foreign.js
  var _new = function(val) {
    return function() {
      return { value: val };
    };
  };
  var read = function(ref) {
    return function() {
      return ref.value;
    };
  };
  var write = function(val) {
    return function(ref) {
      return function() {
        ref.value = val;
      };
    };
  };

  // output/Effect.Ref/index.js
  var $$new = _new;

  // output/Control.Monad.Rec.Class/index.js
  var bindFlipped2 = /* @__PURE__ */ bindFlipped(bindEffect);
  var map2 = /* @__PURE__ */ map(functorEffect);
  var Loop = /* @__PURE__ */ function() {
    function Loop2(value0) {
      this.value0 = value0;
    }
    ;
    Loop2.create = function(value0) {
      return new Loop2(value0);
    };
    return Loop2;
  }();
  var Done = /* @__PURE__ */ function() {
    function Done2(value0) {
      this.value0 = value0;
    }
    ;
    Done2.create = function(value0) {
      return new Done2(value0);
    };
    return Done2;
  }();
  var tailRecM = function(dict) {
    return dict.tailRecM;
  };
  var monadRecEffect = {
    tailRecM: function(f) {
      return function(a) {
        var fromDone = function(v) {
          if (v instanceof Done) {
            return v.value0;
          }
          ;
          throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 137, column 30 - line 137, column 44): " + [v.constructor.name]);
        };
        return function __do() {
          var r = bindFlipped2($$new)(f(a))();
          (function() {
            while (!function __do2() {
              var v = read(r)();
              if (v instanceof Loop) {
                var e = f(v.value0)();
                write(e)(r)();
                return false;
              }
              ;
              if (v instanceof Done) {
                return true;
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Rec.Class (line 128, column 22 - line 133, column 28): " + [v.constructor.name]);
            }()) {
            }
            ;
            return {};
          })();
          return map2(fromDone)(read(r))();
        };
      };
    },
    Monad0: function() {
      return monadEffect;
    }
  };

  // output/Control.Monad.Reader.Class/index.js
  var ask = function(dict) {
    return dict.ask;
  };

  // output/Control.Monad.Trans.Class/index.js
  var lift = function(dict) {
    return dict.lift;
  };

  // output/Effect.Class/index.js
  var monadEffectEffect = {
    liftEffect: /* @__PURE__ */ identity(categoryFn),
    Monad0: function() {
      return monadEffect;
    }
  };
  var liftEffect = function(dict) {
    return dict.liftEffect;
  };

  // output/Control.Monad.Writer.Class/index.js
  var tell = function(dict) {
    return dict.tell;
  };

  // output/Control.Monad.Reader.Trans/index.js
  var ReaderT = function(x) {
    return x;
  };
  var runReaderT = function(v) {
    return v;
  };
  var monadTransReaderT = {
    lift: function(dictMonad) {
      return function($153) {
        return ReaderT($$const($153));
      };
    }
  };
  var lift3 = /* @__PURE__ */ lift(monadTransReaderT);
  var mapReaderT = function(f) {
    return function(v) {
      return function($154) {
        return f(v($154));
      };
    };
  };
  var functorReaderT = function(dictFunctor) {
    return {
      map: function() {
        var $155 = map(dictFunctor);
        return function($156) {
          return mapReaderT($155($156));
        };
      }()
    };
  };
  var applyReaderT = function(dictApply) {
    var apply3 = apply(dictApply);
    var functorReaderT1 = functorReaderT(dictApply.Functor0());
    return {
      apply: function(v) {
        return function(v1) {
          return function(r) {
            return apply3(v(r))(v1(r));
          };
        };
      },
      Functor0: function() {
        return functorReaderT1;
      }
    };
  };
  var bindReaderT = function(dictBind) {
    var bind3 = bind(dictBind);
    var applyReaderT1 = applyReaderT(dictBind.Apply0());
    return {
      bind: function(v) {
        return function(k) {
          return function(r) {
            return bind3(v(r))(function(a) {
              var v1 = k(a);
              return v1(r);
            });
          };
        };
      },
      Apply0: function() {
        return applyReaderT1;
      }
    };
  };
  var applicativeReaderT = function(dictApplicative) {
    var applyReaderT1 = applyReaderT(dictApplicative.Apply0());
    return {
      pure: function() {
        var $160 = pure(dictApplicative);
        return function($161) {
          return ReaderT($$const($160($161)));
        };
      }(),
      Apply0: function() {
        return applyReaderT1;
      }
    };
  };
  var monadReaderT = function(dictMonad) {
    var applicativeReaderT1 = applicativeReaderT(dictMonad.Applicative0());
    var bindReaderT1 = bindReaderT(dictMonad.Bind1());
    return {
      Applicative0: function() {
        return applicativeReaderT1;
      },
      Bind1: function() {
        return bindReaderT1;
      }
    };
  };
  var monadAskReaderT = function(dictMonad) {
    var monadReaderT1 = monadReaderT(dictMonad);
    return {
      ask: pure(dictMonad.Applicative0()),
      Monad0: function() {
        return monadReaderT1;
      }
    };
  };
  var monadEffectReader = function(dictMonadEffect) {
    var Monad0 = dictMonadEffect.Monad0();
    var monadReaderT1 = monadReaderT(Monad0);
    return {
      liftEffect: function() {
        var $163 = lift3(Monad0);
        var $164 = liftEffect(dictMonadEffect);
        return function($165) {
          return $163($164($165));
        };
      }(),
      Monad0: function() {
        return monadReaderT1;
      }
    };
  };
  var monadRecReaderT = function(dictMonadRec) {
    var Monad0 = dictMonadRec.Monad0();
    var bindFlipped5 = bindFlipped(Monad0.Bind1());
    var pure8 = pure(Monad0.Applicative0());
    var tailRecM3 = tailRecM(dictMonadRec);
    var monadReaderT1 = monadReaderT(Monad0);
    return {
      tailRecM: function(k) {
        return function(a) {
          var k$prime = function(r) {
            return function(a$prime) {
              var v = k(a$prime);
              return bindFlipped5(pure8)(v(r));
            };
          };
          return function(r) {
            return tailRecM3(k$prime(r))(a);
          };
        };
      },
      Monad0: function() {
        return monadReaderT1;
      }
    };
  };
  var monadTellReaderT = function(dictMonadTell) {
    var Monad1 = dictMonadTell.Monad1();
    var Semigroup0 = dictMonadTell.Semigroup0();
    var monadReaderT1 = monadReaderT(Monad1);
    return {
      tell: function() {
        var $169 = lift3(Monad1);
        var $170 = tell(dictMonadTell);
        return function($171) {
          return $169($170($171));
        };
      }(),
      Semigroup0: function() {
        return Semigroup0;
      },
      Monad1: function() {
        return monadReaderT1;
      }
    };
  };

  // output/Control.Monad.Writer.Trans/index.js
  var WriterT = function(x) {
    return x;
  };
  var runWriterT = function(v) {
    return v;
  };
  var monadTransWriterT = function(dictMonoid) {
    var mempty4 = mempty(dictMonoid);
    return {
      lift: function(dictMonad) {
        var bind3 = bind(dictMonad.Bind1());
        var pure8 = pure(dictMonad.Applicative0());
        return function(m) {
          return bind3(m)(function(a) {
            return pure8(new Tuple(a, mempty4));
          });
        };
      }
    };
  };
  var mapWriterT = function(f) {
    return function(v) {
      return f(v);
    };
  };
  var functorWriterT = function(dictFunctor) {
    var map9 = map(dictFunctor);
    return {
      map: function(f) {
        return mapWriterT(map9(function(v) {
          return new Tuple(f(v.value0), v.value1);
        }));
      }
    };
  };
  var applyWriterT = function(dictSemigroup) {
    var append4 = append(dictSemigroup);
    return function(dictApply) {
      var apply3 = apply(dictApply);
      var Functor0 = dictApply.Functor0();
      var map9 = map(Functor0);
      var functorWriterT1 = functorWriterT(Functor0);
      return {
        apply: function(v) {
          return function(v1) {
            var k = function(v3) {
              return function(v4) {
                return new Tuple(v3.value0(v4.value0), append4(v3.value1)(v4.value1));
              };
            };
            return apply3(map9(k)(v))(v1);
          };
        },
        Functor0: function() {
          return functorWriterT1;
        }
      };
    };
  };
  var bindWriterT = function(dictSemigroup) {
    var append4 = append(dictSemigroup);
    var applyWriterT1 = applyWriterT(dictSemigroup);
    return function(dictBind) {
      var bind3 = bind(dictBind);
      var Apply0 = dictBind.Apply0();
      var map9 = map(Apply0.Functor0());
      var applyWriterT2 = applyWriterT1(Apply0);
      return {
        bind: function(v) {
          return function(k) {
            return bind3(v)(function(v1) {
              var v2 = k(v1.value0);
              return map9(function(v3) {
                return new Tuple(v3.value0, append4(v1.value1)(v3.value1));
              })(v2);
            });
          };
        },
        Apply0: function() {
          return applyWriterT2;
        }
      };
    };
  };
  var applicativeWriterT = function(dictMonoid) {
    var mempty4 = mempty(dictMonoid);
    var applyWriterT1 = applyWriterT(dictMonoid.Semigroup0());
    return function(dictApplicative) {
      var pure8 = pure(dictApplicative);
      var applyWriterT2 = applyWriterT1(dictApplicative.Apply0());
      return {
        pure: function(a) {
          return pure8(new Tuple(a, mempty4));
        },
        Apply0: function() {
          return applyWriterT2;
        }
      };
    };
  };
  var monadWriterT = function(dictMonoid) {
    var applicativeWriterT1 = applicativeWriterT(dictMonoid);
    var bindWriterT1 = bindWriterT(dictMonoid.Semigroup0());
    return function(dictMonad) {
      var applicativeWriterT22 = applicativeWriterT1(dictMonad.Applicative0());
      var bindWriterT22 = bindWriterT1(dictMonad.Bind1());
      return {
        Applicative0: function() {
          return applicativeWriterT22;
        },
        Bind1: function() {
          return bindWriterT22;
        }
      };
    };
  };
  var monadEffectWriter = function(dictMonoid) {
    var lift7 = lift(monadTransWriterT(dictMonoid));
    var monadWriterT1 = monadWriterT(dictMonoid);
    return function(dictMonadEffect) {
      var Monad0 = dictMonadEffect.Monad0();
      var monadWriterT22 = monadWriterT1(Monad0);
      return {
        liftEffect: function() {
          var $259 = lift7(Monad0);
          var $260 = liftEffect(dictMonadEffect);
          return function($261) {
            return $259($260($261));
          };
        }(),
        Monad0: function() {
          return monadWriterT22;
        }
      };
    };
  };
  var monadRecWriterT = function(dictMonoid) {
    var append4 = append(dictMonoid.Semigroup0());
    var mempty4 = mempty(dictMonoid);
    var monadWriterT1 = monadWriterT(dictMonoid);
    return function(dictMonadRec) {
      var Monad0 = dictMonadRec.Monad0();
      var bind3 = bind(Monad0.Bind1());
      var pure8 = pure(Monad0.Applicative0());
      var tailRecM3 = tailRecM(dictMonadRec);
      var monadWriterT22 = monadWriterT1(Monad0);
      return {
        tailRecM: function(f) {
          return function(a) {
            var f$prime = function(v) {
              var v1 = f(v.value0);
              return bind3(v1)(function(v2) {
                return pure8(function() {
                  if (v2.value0 instanceof Loop) {
                    return new Loop(new Tuple(v2.value0.value0, append4(v.value1)(v2.value1)));
                  }
                  ;
                  if (v2.value0 instanceof Done) {
                    return new Done(new Tuple(v2.value0.value0, append4(v.value1)(v2.value1)));
                  }
                  ;
                  throw new Error("Failed pattern match at Control.Monad.Writer.Trans (line 84, column 16 - line 86, column 47): " + [v2.value0.constructor.name]);
                }());
              });
            };
            return tailRecM3(f$prime)(new Tuple(a, mempty4));
          };
        },
        Monad0: function() {
          return monadWriterT22;
        }
      };
    };
  };
  var monadTellWriterT = function(dictMonoid) {
    var Semigroup0 = dictMonoid.Semigroup0();
    var monadWriterT1 = monadWriterT(dictMonoid);
    return function(dictMonad) {
      var monadWriterT22 = monadWriterT1(dictMonad);
      return {
        tell: function() {
          var $262 = pure(dictMonad.Applicative0());
          var $263 = Tuple.create(unit);
          return function($264) {
            return WriterT($262($263($264)));
          };
        }(),
        Semigroup0: function() {
          return Semigroup0;
        },
        Monad1: function() {
          return monadWriterT22;
        }
      };
    };
  };

  // output/Control.Parallel.Class/index.js
  var sequential = function(dict) {
    return dict.sequential;
  };
  var parallel = function(dict) {
    return dict.parallel;
  };

  // output/Control.Parallel/index.js
  var identity5 = /* @__PURE__ */ identity(categoryFn);
  var parTraverse_ = function(dictParallel) {
    var sequential2 = sequential(dictParallel);
    var parallel3 = parallel(dictParallel);
    return function(dictApplicative) {
      var traverse_5 = traverse_(dictApplicative);
      return function(dictFoldable) {
        var traverse_1 = traverse_5(dictFoldable);
        return function(f) {
          var $51 = traverse_1(function($53) {
            return parallel3(f($53));
          });
          return function($52) {
            return sequential2($51($52));
          };
        };
      };
    };
  };
  var parSequence_ = function(dictParallel) {
    var parTraverse_1 = parTraverse_(dictParallel);
    return function(dictApplicative) {
      var parTraverse_2 = parTraverse_1(dictApplicative);
      return function(dictFoldable) {
        return parTraverse_2(dictFoldable)(identity5);
      };
    };
  };

  // output/Partial.Unsafe/foreign.js
  var _unsafePartial = function(f) {
    return f();
  };

  // output/Partial/foreign.js
  var _crashWith = function(msg) {
    throw new Error(msg);
  };

  // output/Partial/index.js
  var crashWith = function() {
    return _crashWith;
  };

  // output/Partial.Unsafe/index.js
  var crashWith2 = /* @__PURE__ */ crashWith();
  var unsafePartial = _unsafePartial;
  var unsafeCrashWith = function(msg) {
    return unsafePartial(function() {
      return crashWith2(msg);
    });
  };

  // output/Effect.Aff/index.js
  var $runtime_lazy2 = function(name16, moduleName, init) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2) return val;
      if (state3 === 1) throw new ReferenceError(name16 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init();
      state3 = 2;
      return val;
    };
  };
  var $$void2 = /* @__PURE__ */ $$void(functorEffect);
  var Canceler = function(x) {
    return x;
  };
  var functorParAff = {
    map: _parAffMap
  };
  var functorAff = {
    map: _map
  };
  var ffiUtil = /* @__PURE__ */ function() {
    var unsafeFromRight = function(v) {
      if (v instanceof Right) {
        return v.value0;
      }
      ;
      if (v instanceof Left) {
        return unsafeCrashWith("unsafeFromRight: Left");
      }
      ;
      throw new Error("Failed pattern match at Effect.Aff (line 412, column 21 - line 414, column 54): " + [v.constructor.name]);
    };
    var unsafeFromLeft = function(v) {
      if (v instanceof Left) {
        return v.value0;
      }
      ;
      if (v instanceof Right) {
        return unsafeCrashWith("unsafeFromLeft: Right");
      }
      ;
      throw new Error("Failed pattern match at Effect.Aff (line 407, column 20 - line 409, column 55): " + [v.constructor.name]);
    };
    var isLeft = function(v) {
      if (v instanceof Left) {
        return true;
      }
      ;
      if (v instanceof Right) {
        return false;
      }
      ;
      throw new Error("Failed pattern match at Effect.Aff (line 402, column 12 - line 404, column 21): " + [v.constructor.name]);
    };
    return {
      isLeft,
      fromLeft: unsafeFromLeft,
      fromRight: unsafeFromRight,
      left: Left.create,
      right: Right.create
    };
  }();
  var makeFiber = function(aff) {
    return _makeFiber(ffiUtil, aff);
  };
  var launchAff = function(aff) {
    return function __do() {
      var fiber = makeFiber(aff)();
      fiber.run();
      return fiber;
    };
  };
  var launchAff_ = function($75) {
    return $$void2(launchAff($75));
  };
  var applyParAff = {
    apply: _parAffApply,
    Functor0: function() {
      return functorParAff;
    }
  };
  var monadAff = {
    Applicative0: function() {
      return applicativeAff;
    },
    Bind1: function() {
      return bindAff;
    }
  };
  var bindAff = {
    bind: _bind,
    Apply0: function() {
      return $lazy_applyAff(0);
    }
  };
  var applicativeAff = {
    pure: _pure,
    Apply0: function() {
      return $lazy_applyAff(0);
    }
  };
  var $lazy_applyAff = /* @__PURE__ */ $runtime_lazy2("applyAff", "Effect.Aff", function() {
    return {
      apply: ap(monadAff),
      Functor0: function() {
        return functorAff;
      }
    };
  });
  var applyAff = /* @__PURE__ */ $lazy_applyAff(73);
  var pure2 = /* @__PURE__ */ pure(applicativeAff);
  var parallelAff = {
    parallel: unsafeCoerce2,
    sequential: _sequential,
    Apply0: function() {
      return applyAff;
    },
    Apply1: function() {
      return applyParAff;
    }
  };
  var parallel2 = /* @__PURE__ */ parallel(parallelAff);
  var applicativeParAff = {
    pure: function($76) {
      return parallel2(pure2($76));
    },
    Apply0: function() {
      return applyParAff;
    }
  };
  var parSequence_2 = /* @__PURE__ */ parSequence_(parallelAff)(applicativeParAff)(foldableArray);
  var semigroupCanceler = {
    append: function(v) {
      return function(v1) {
        return function(err) {
          return parSequence_2([v(err), v1(err)]);
        };
      };
    }
  };
  var monadEffectAff = {
    liftEffect: _liftEffect,
    Monad0: function() {
      return monadAff;
    }
  };
  var liftEffect2 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var effectCanceler = function($77) {
    return Canceler($$const(liftEffect2($77)));
  };
  var nonCanceler = /* @__PURE__ */ $$const(/* @__PURE__ */ pure2(unit));
  var monoidCanceler = {
    mempty: nonCanceler,
    Semigroup0: function() {
      return semigroupCanceler;
    }
  };

  // output/Web.DOM.Element/foreign.js
  var getProp = function(name16) {
    return function(doctype) {
      return doctype[name16];
    };
  };
  var _namespaceURI = getProp("namespaceURI");
  var _prefix = getProp("prefix");
  var localName = getProp("localName");
  var tagName = getProp("tagName");
  function setAttribute(name16) {
    return function(value12) {
      return function(element) {
        return function() {
          element.setAttribute(name16, value12);
        };
      };
    };
  }
  function removeAttribute(name16) {
    return function(element) {
      return function() {
        element.removeAttribute(name16);
      };
    };
  }

  // output/Data.Nullable/foreign.js
  var nullImpl = null;
  function nullable(a, r, f) {
    return a == null ? r : f(a);
  }
  function notNull(x) {
    return x;
  }

  // output/Data.Nullable/index.js
  var toNullable = /* @__PURE__ */ maybe(nullImpl)(notNull);
  var toMaybe = function(n) {
    return nullable(n, Nothing.value, Just.create);
  };

  // output/Web.DOM.ParentNode/foreign.js
  var getEffProp = function(name16) {
    return function(node) {
      return function() {
        return node[name16];
      };
    };
  };
  var children = getEffProp("children");
  var _firstElementChild = getEffProp("firstElementChild");
  var _lastElementChild = getEffProp("lastElementChild");
  var childElementCount = getEffProp("childElementCount");

  // output/Web.Internal.FFI/foreign.js
  function _unsafeReadProtoTagged(nothing, just, name16, value12) {
    if (typeof window !== "undefined") {
      var ty = window[name16];
      if (ty != null && value12 instanceof ty) {
        return just(value12);
      }
    }
    var obj = value12;
    while (obj != null) {
      var proto = Object.getPrototypeOf(obj);
      var constructorName = proto.constructor.name;
      if (constructorName === name16) {
        return just(value12);
      } else if (constructorName === "Object") {
        return nothing;
      }
      obj = proto;
    }
    return nothing;
  }

  // output/Web.Internal.FFI/index.js
  var unsafeReadProtoTagged = function(name16) {
    return function(value12) {
      return _unsafeReadProtoTagged(Nothing.value, Just.create, name16, value12);
    };
  };

  // output/Web.DOM.Element/index.js
  var toNode = unsafeCoerce2;
  var toEventTarget = unsafeCoerce2;
  var fromNode = /* @__PURE__ */ unsafeReadProtoTagged("Element");

  // output/Web.Event.EventTarget/foreign.js
  function eventListener(fn) {
    return function() {
      return function(event) {
        return fn(event)();
      };
    };
  }
  function addEventListener(type) {
    return function(listener) {
      return function(useCapture) {
        return function(target5) {
          return function() {
            return target5.addEventListener(type, listener, useCapture);
          };
        };
      };
    };
  }
  function removeEventListener(type) {
    return function(listener) {
      return function(useCapture) {
        return function(target5) {
          return function() {
            return target5.removeEventListener(type, listener, useCapture);
          };
        };
      };
    };
  }

  // output/Web.HTML/foreign.js
  var windowImpl = function() {
    return window;
  };

  // output/Web.HTML.HTMLDocument/foreign.js
  function _body(doc) {
    return doc.body;
  }
  function _readyState(doc) {
    return doc.readyState;
  }

  // output/Web.HTML.HTMLDocument.ReadyState/index.js
  var Loading = /* @__PURE__ */ function() {
    function Loading2() {
    }
    ;
    Loading2.value = new Loading2();
    return Loading2;
  }();
  var Interactive = /* @__PURE__ */ function() {
    function Interactive2() {
    }
    ;
    Interactive2.value = new Interactive2();
    return Interactive2;
  }();
  var Complete = /* @__PURE__ */ function() {
    function Complete2() {
    }
    ;
    Complete2.value = new Complete2();
    return Complete2;
  }();
  var parse = function(v) {
    if (v === "loading") {
      return new Just(Loading.value);
    }
    ;
    if (v === "interactive") {
      return new Just(Interactive.value);
    }
    ;
    if (v === "complete") {
      return new Just(Complete.value);
    }
    ;
    return Nothing.value;
  };

  // output/Web.HTML.HTMLDocument/index.js
  var map3 = /* @__PURE__ */ map(functorEffect);
  var toDocument = unsafeCoerce2;
  var readyState = function(doc) {
    return map3(function() {
      var $4 = fromMaybe(Loading.value);
      return function($5) {
        return $4(parse($5));
      };
    }())(function() {
      return _readyState(doc);
    });
  };
  var body = function(doc) {
    return map3(toMaybe)(function() {
      return _body(doc);
    });
  };

  // output/Web.HTML.HTMLElement/index.js
  var toNode2 = unsafeCoerce2;

  // output/Web.HTML.Window/foreign.js
  function document2(window2) {
    return function() {
      return window2.document;
    };
  }

  // output/Web.HTML.Window/index.js
  var toEventTarget2 = unsafeCoerce2;

  // output/Web.HTML.Event.EventTypes/index.js
  var domcontentloaded = "DOMContentLoaded";

  // output/Jelly.Aff/index.js
  var bindFlipped3 = /* @__PURE__ */ bindFlipped(bindEffect);
  var pure3 = /* @__PURE__ */ pure(applicativeFn);
  var discard2 = /* @__PURE__ */ discard(discardUnit);
  var mempty2 = /* @__PURE__ */ mempty(/* @__PURE__ */ monoidEffect(monoidCanceler));
  var discard22 = /* @__PURE__ */ discard2(bindAff);
  var bind1 = /* @__PURE__ */ bind(bindAff);
  var liftEffect3 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var pure22 = /* @__PURE__ */ pure(applicativeAff);
  var map4 = /* @__PURE__ */ map(functorMaybe);
  var awaitDomContentLoaded = /* @__PURE__ */ makeAff(function(callback) {
    return function __do() {
      var w = windowImpl();
      var rs = bindFlipped3(readyState)(bindFlipped3(document2)(windowImpl))();
      if (rs instanceof Loading) {
        var et = toEventTarget2(w);
        var listener = eventListener(pure3(callback(new Right(unit))))();
        addEventListener(domcontentloaded)(listener)(false)(et)();
        return effectCanceler(removeEventListener(domcontentloaded)(listener)(false)(et));
      }
      ;
      callback(new Right(unit))();
      return mempty2();
    };
  });
  var awaitBody = /* @__PURE__ */ discard22(awaitDomContentLoaded)(function() {
    return bind1(liftEffect3(bindFlipped3(body)(bindFlipped3(document2)(windowImpl))))(function(htmlEl) {
      return pure22(map4(toNode2)(htmlEl));
    });
  });

  // output/Data.List.Types/index.js
  var Nil = /* @__PURE__ */ function() {
    function Nil2() {
    }
    ;
    Nil2.value = new Nil2();
    return Nil2;
  }();
  var Cons = /* @__PURE__ */ function() {
    function Cons2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Cons2.create = function(value0) {
      return function(value1) {
        return new Cons2(value0, value1);
      };
    };
    return Cons2;
  }();

  // output/Data.List/index.js
  var reverse = /* @__PURE__ */ function() {
    var go2 = function($copy_v) {
      return function($copy_v1) {
        var $tco_var_v = $copy_v;
        var $tco_done = false;
        var $tco_result;
        function $tco_loop(v, v1) {
          if (v1 instanceof Nil) {
            $tco_done = true;
            return v;
          }
          ;
          if (v1 instanceof Cons) {
            $tco_var_v = new Cons(v1.value0, v);
            $copy_v1 = v1.value1;
            return;
          }
          ;
          throw new Error("Failed pattern match at Data.List (line 368, column 3 - line 368, column 19): " + [v.constructor.name, v1.constructor.name]);
        }
        ;
        while (!$tco_done) {
          $tco_result = $tco_loop($tco_var_v, $copy_v1);
        }
        ;
        return $tco_result;
      };
    };
    return go2(Nil.value);
  }();

  // output/Data.CatQueue/index.js
  var CatQueue = /* @__PURE__ */ function() {
    function CatQueue2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    CatQueue2.create = function(value0) {
      return function(value1) {
        return new CatQueue2(value0, value1);
      };
    };
    return CatQueue2;
  }();
  var uncons = function($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
      if (v.value0 instanceof Nil && v.value1 instanceof Nil) {
        $tco_done = true;
        return Nothing.value;
      }
      ;
      if (v.value0 instanceof Nil) {
        $copy_v = new CatQueue(reverse(v.value1), Nil.value);
        return;
      }
      ;
      if (v.value0 instanceof Cons) {
        $tco_done = true;
        return new Just(new Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
      }
      ;
      throw new Error("Failed pattern match at Data.CatQueue (line 82, column 1 - line 82, column 63): " + [v.constructor.name]);
    }
    ;
    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }
    ;
    return $tco_result;
  };
  var snoc = function(v) {
    return function(a) {
      return new CatQueue(v.value0, new Cons(a, v.value1));
    };
  };
  var $$null = function(v) {
    if (v.value0 instanceof Nil && v.value1 instanceof Nil) {
      return true;
    }
    ;
    return false;
  };
  var empty2 = /* @__PURE__ */ function() {
    return new CatQueue(Nil.value, Nil.value);
  }();

  // output/Data.CatList/index.js
  var CatNil = /* @__PURE__ */ function() {
    function CatNil2() {
    }
    ;
    CatNil2.value = new CatNil2();
    return CatNil2;
  }();
  var CatCons = /* @__PURE__ */ function() {
    function CatCons2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    CatCons2.create = function(value0) {
      return function(value1) {
        return new CatCons2(value0, value1);
      };
    };
    return CatCons2;
  }();
  var link = function(v) {
    return function(v1) {
      if (v instanceof CatNil) {
        return v1;
      }
      ;
      if (v1 instanceof CatNil) {
        return v;
      }
      ;
      if (v instanceof CatCons) {
        return new CatCons(v.value0, snoc(v.value1)(v1));
      }
      ;
      throw new Error("Failed pattern match at Data.CatList (line 108, column 1 - line 108, column 54): " + [v.constructor.name, v1.constructor.name]);
    };
  };
  var foldr2 = function(k) {
    return function(b) {
      return function(q) {
        var foldl2 = function($copy_v) {
          return function($copy_v1) {
            return function($copy_v2) {
              var $tco_var_v = $copy_v;
              var $tco_var_v1 = $copy_v1;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v, v1, v2) {
                if (v2 instanceof Nil) {
                  $tco_done = true;
                  return v1;
                }
                ;
                if (v2 instanceof Cons) {
                  $tco_var_v = v;
                  $tco_var_v1 = v(v1)(v2.value0);
                  $copy_v2 = v2.value1;
                  return;
                }
                ;
                throw new Error("Failed pattern match at Data.CatList (line 124, column 3 - line 124, column 59): " + [v.constructor.name, v1.constructor.name, v2.constructor.name]);
              }
              ;
              while (!$tco_done) {
                $tco_result = $tco_loop($tco_var_v, $tco_var_v1, $copy_v2);
              }
              ;
              return $tco_result;
            };
          };
        };
        var go2 = function($copy_xs) {
          return function($copy_ys) {
            var $tco_var_xs = $copy_xs;
            var $tco_done1 = false;
            var $tco_result;
            function $tco_loop(xs, ys) {
              var v = uncons(xs);
              if (v instanceof Nothing) {
                $tco_done1 = true;
                return foldl2(function(x) {
                  return function(i) {
                    return i(x);
                  };
                })(b)(ys);
              }
              ;
              if (v instanceof Just) {
                $tco_var_xs = v.value0.value1;
                $copy_ys = new Cons(k(v.value0.value0), ys);
                return;
              }
              ;
              throw new Error("Failed pattern match at Data.CatList (line 120, column 14 - line 122, column 67): " + [v.constructor.name]);
            }
            ;
            while (!$tco_done1) {
              $tco_result = $tco_loop($tco_var_xs, $copy_ys);
            }
            ;
            return $tco_result;
          };
        };
        return go2(q)(Nil.value);
      };
    };
  };
  var uncons2 = function(v) {
    if (v instanceof CatNil) {
      return Nothing.value;
    }
    ;
    if (v instanceof CatCons) {
      return new Just(new Tuple(v.value0, function() {
        var $66 = $$null(v.value1);
        if ($66) {
          return CatNil.value;
        }
        ;
        return foldr2(link)(CatNil.value)(v.value1);
      }()));
    }
    ;
    throw new Error("Failed pattern match at Data.CatList (line 99, column 1 - line 99, column 61): " + [v.constructor.name]);
  };
  var empty3 = /* @__PURE__ */ function() {
    return CatNil.value;
  }();
  var append2 = link;
  var semigroupCatList = {
    append: append2
  };
  var snoc2 = function(cat) {
    return function(a) {
      return append2(cat)(new CatCons(a, empty2));
    };
  };

  // output/Control.Monad.Free/index.js
  var $runtime_lazy3 = function(name16, moduleName, init) {
    var state3 = 0;
    var val;
    return function(lineNumber) {
      if (state3 === 2) return val;
      if (state3 === 1) throw new ReferenceError(name16 + " was needed before it finished initializing (module " + moduleName + ", line " + lineNumber + ")", moduleName, lineNumber);
      state3 = 1;
      val = init();
      state3 = 2;
      return val;
    };
  };
  var append3 = /* @__PURE__ */ append(semigroupCatList);
  var Free = /* @__PURE__ */ function() {
    function Free2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Free2.create = function(value0) {
      return function(value1) {
        return new Free2(value0, value1);
      };
    };
    return Free2;
  }();
  var Return = /* @__PURE__ */ function() {
    function Return2(value0) {
      this.value0 = value0;
    }
    ;
    Return2.create = function(value0) {
      return new Return2(value0);
    };
    return Return2;
  }();
  var Bind = /* @__PURE__ */ function() {
    function Bind3(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Bind3.create = function(value0) {
      return function(value1) {
        return new Bind3(value0, value1);
      };
    };
    return Bind3;
  }();
  var toView = function($copy_v) {
    var $tco_done = false;
    var $tco_result;
    function $tco_loop(v) {
      var runExpF = function(v22) {
        return v22;
      };
      var concatF = function(v22) {
        return function(r) {
          return new Free(v22.value0, append3(v22.value1)(r));
        };
      };
      if (v.value0 instanceof Return) {
        var v2 = uncons2(v.value1);
        if (v2 instanceof Nothing) {
          $tco_done = true;
          return new Return(v.value0.value0);
        }
        ;
        if (v2 instanceof Just) {
          $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
          return;
        }
        ;
        throw new Error("Failed pattern match at Control.Monad.Free (line 227, column 7 - line 231, column 64): " + [v2.constructor.name]);
      }
      ;
      if (v.value0 instanceof Bind) {
        $tco_done = true;
        return new Bind(v.value0.value0, function(a) {
          return concatF(v.value0.value1(a))(v.value1);
        });
      }
      ;
      throw new Error("Failed pattern match at Control.Monad.Free (line 225, column 3 - line 233, column 56): " + [v.value0.constructor.name]);
    }
    ;
    while (!$tco_done) {
      $tco_result = $tco_loop($copy_v);
    }
    ;
    return $tco_result;
  };
  var fromView = function(f) {
    return new Free(f, empty3);
  };
  var freeMonad = {
    Applicative0: function() {
      return freeApplicative;
    },
    Bind1: function() {
      return freeBind;
    }
  };
  var freeFunctor = {
    map: function(k) {
      return function(f) {
        return bindFlipped(freeBind)(function() {
          var $189 = pure(freeApplicative);
          return function($190) {
            return $189(k($190));
          };
        }())(f);
      };
    }
  };
  var freeBind = {
    bind: function(v) {
      return function(k) {
        return new Free(v.value0, snoc2(v.value1)(k));
      };
    },
    Apply0: function() {
      return $lazy_freeApply(0);
    }
  };
  var freeApplicative = {
    pure: function($191) {
      return fromView(Return.create($191));
    },
    Apply0: function() {
      return $lazy_freeApply(0);
    }
  };
  var $lazy_freeApply = /* @__PURE__ */ $runtime_lazy3("freeApply", "Control.Monad.Free", function() {
    return {
      apply: ap(freeMonad),
      Functor0: function() {
        return freeFunctor;
      }
    };
  });
  var pure4 = /* @__PURE__ */ pure(freeApplicative);
  var liftF = function(f) {
    return fromView(new Bind(f, function($192) {
      return pure4($192);
    }));
  };
  var foldFree = function(dictMonadRec) {
    var Monad0 = dictMonadRec.Monad0();
    var map12 = map(Monad0.Bind1().Apply0().Functor0());
    var pure13 = pure(Monad0.Applicative0());
    var tailRecM3 = tailRecM(dictMonadRec);
    return function(k) {
      var go2 = function(f) {
        var v = toView(f);
        if (v instanceof Return) {
          return map12(Done.create)(pure13(v.value0));
        }
        ;
        if (v instanceof Bind) {
          return map12(function($199) {
            return Loop.create(v.value1($199));
          })(k(v.value0));
        }
        ;
        throw new Error("Failed pattern match at Control.Monad.Free (line 158, column 10 - line 160, column 37): " + [v.constructor.name]);
      };
      return tailRecM3(go2);
    };
  };

  // output/Jelly.Signal/foreign.js
  var newChannelImpl = (initialValue) => () => ({
    subscriptions: /* @__PURE__ */ new Set(),
    value: initialValue
  });
  var modifyChannelImpl = (channel) => (fn) => () => {
    channel.value = fn(channel.value);
    channel.subscriptions.forEach((subscription) => {
      subscription.cleaner();
      subscription.cleaner = subscription.callback(channel.value)();
    });
  };
  var readChannel = (channel) => () => channel.value;
  var subscribeChannel = (channel) => (callback) => () => {
    const subscription = {
      callback,
      cleaner: callback(channel.value)()
    };
    channel.subscriptions.add(subscription);
    return () => {
      subscription.cleaner();
      channel.subscriptions.delete(subscription);
    };
  };

  // output/Jelly.Signal/index.js
  var map5 = /* @__PURE__ */ map(functorEffect);
  var apply2 = /* @__PURE__ */ apply(applyEffect);
  var pure5 = /* @__PURE__ */ pure(applicativeEffect);
  var identity6 = /* @__PURE__ */ identity(categoryFn);
  var functorSignal = {
    map: function(f) {
      return function(v) {
        return {
          run: function(cb) {
            return v.run(function($102) {
              return cb(f($102));
            });
          },
          get: map5(f)(v.get)
        };
      };
    }
  };
  var mapFlipped2 = /* @__PURE__ */ mapFlipped(functorSignal);
  var applySignal = {
    apply: function(v) {
      return function(v1) {
        return {
          run: function(cb) {
            return v.run(function(f) {
              return v1.run(function($103) {
                return cb(f($103));
              });
            });
          },
          get: apply2(v.get)(v1.get)
        };
      };
    },
    Functor0: function() {
      return functorSignal;
    }
  };
  var lift23 = /* @__PURE__ */ lift2(applySignal);
  var bindSignal = {
    bind: function(v) {
      return function(f) {
        return {
          run: function(cb) {
            return v.run(function(a) {
              var v1 = f(a);
              return v1.run(cb);
            });
          },
          get: function __do() {
            var a = v.get();
            var v1 = f(a);
            return v1.get();
          }
        };
      };
    },
    Apply0: function() {
      return applySignal;
    }
  };
  var semigroupSignal = function(dictSemigroup) {
    return {
      append: lift23(append(dictSemigroup))
    };
  };
  var applicativeSignal = {
    pure: function(a) {
      return {
        run: function(cb) {
          return cb(a);
        },
        get: pure5(a)
      };
    },
    Apply0: function() {
      return applySignal;
    }
  };
  var pure1 = /* @__PURE__ */ pure(applicativeSignal);
  var monoidSignal = function(dictMonoid) {
    var semigroupSignal1 = semigroupSignal(dictMonoid.Semigroup0());
    return {
      mempty: pure1(mempty(dictMonoid)),
      Semigroup0: function() {
        return semigroupSignal1;
      }
    };
  };
  var subscribe = function(chn) {
    return {
      run: subscribeChannel(chn),
      get: readChannel(chn)
    };
  };
  var runSignal = function(dictMonadEffect) {
    var liftEffect6 = liftEffect(dictMonadEffect);
    return function(v) {
      return liftEffect6(v.run(identity6));
    };
  };
  var readSignal = function(dictMonadEffect) {
    var liftEffect6 = liftEffect(dictMonadEffect);
    return function(v) {
      return liftEffect6(v.get);
    };
  };
  var newChannel = function(dictMonadEffect) {
    var $104 = liftEffect(dictMonadEffect);
    return function($105) {
      return $104(newChannelImpl($105));
    };
  };
  var newState = function(dictMonadEffect) {
    var Monad0 = dictMonadEffect.Monad0();
    var bind12 = bind(Monad0.Bind1());
    var newChannel1 = newChannel(dictMonadEffect);
    var pure23 = pure(Monad0.Applicative0());
    return function(a) {
      return bind12(newChannel1(a))(function(chn) {
        return pure23(new Tuple(subscribe(chn), chn));
      });
    };
  };
  var modifyChannel_ = function(dictMonadEffect) {
    var liftEffect6 = liftEffect(dictMonadEffect);
    return function(c) {
      return function(f) {
        return liftEffect6(modifyChannelImpl(c)(f));
      };
    };
  };
  var writeChannel = function(dictMonadEffect) {
    var modifyChannel_1 = modifyChannel_(dictMonadEffect);
    return function(c) {
      var $106 = modifyChannel_1(c);
      return function($107) {
        return $106($$const($107));
      };
    };
  };
  var writeChannel1 = /* @__PURE__ */ writeChannel(monadEffectEffect);
  var memoSignal = function(dictMonadEffect) {
    var Monad0 = dictMonadEffect.Monad0();
    var bind12 = bind(Monad0.Bind1());
    var newChannel1 = newChannel(dictMonadEffect);
    var runSignal1 = runSignal(dictMonadEffect);
    var pure23 = pure(Monad0.Applicative0());
    return function(sig) {
      return bind12(newChannel1(unit))(function(chn) {
        return bind12(runSignal1(mapFlipped2(sig)(function(eff) {
          return function __do() {
            var v = eff();
            writeChannel1(chn)(v.value0)();
            return v.value1;
          };
        })))(function(cln) {
          return pure23(new Tuple(subscribe(chn), cln));
        });
      });
    };
  };

  // output/Jelly.Component/index.js
  var pure6 = /* @__PURE__ */ pure(applicativeSignal);
  var ComponentEl = /* @__PURE__ */ function() {
    function ComponentEl2(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    ComponentEl2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new ComponentEl2(value0, value1, value22, value32);
          };
        };
      };
    };
    return ComponentEl2;
  }();
  var ComponentElNS = /* @__PURE__ */ function() {
    function ComponentElNS2(value0, value1, value22, value32, value42) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
      this.value4 = value42;
    }
    ;
    ComponentElNS2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return function(value42) {
              return new ComponentElNS2(value0, value1, value22, value32, value42);
            };
          };
        };
      };
    };
    return ComponentElNS2;
  }();
  var ComponentElVoid = /* @__PURE__ */ function() {
    function ComponentElVoid2(value0, value1, value22) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
    }
    ;
    ComponentElVoid2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return new ComponentElVoid2(value0, value1, value22);
        };
      };
    };
    return ComponentElVoid2;
  }();
  var ComponentRawSig = /* @__PURE__ */ function() {
    function ComponentRawSig2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ComponentRawSig2.create = function(value0) {
      return function(value1) {
        return new ComponentRawSig2(value0, value1);
      };
    };
    return ComponentRawSig2;
  }();
  var ComponentTextSig = /* @__PURE__ */ function() {
    function ComponentTextSig2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ComponentTextSig2.create = function(value0) {
      return function(value1) {
        return new ComponentTextSig2(value0, value1);
      };
    };
    return ComponentTextSig2;
  }();
  var ComponentDoctype = /* @__PURE__ */ function() {
    function ComponentDoctype2(value0, value1, value22, value32) {
      this.value0 = value0;
      this.value1 = value1;
      this.value2 = value22;
      this.value3 = value32;
    }
    ;
    ComponentDoctype2.create = function(value0) {
      return function(value1) {
        return function(value22) {
          return function(value32) {
            return new ComponentDoctype2(value0, value1, value22, value32);
          };
        };
      };
    };
    return ComponentDoctype2;
  }();
  var ComponentHooks = /* @__PURE__ */ function() {
    function ComponentHooks2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ComponentHooks2.create = function(value0) {
      return function(value1) {
        return new ComponentHooks2(value0, value1);
      };
    };
    return ComponentHooks2;
  }();
  var ComponentSwitch = /* @__PURE__ */ function() {
    function ComponentSwitch2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    ComponentSwitch2.create = function(value0) {
      return function(value1) {
        return new ComponentSwitch2(value0, value1);
      };
    };
    return ComponentSwitch2;
  }();
  var textSig = function(sig) {
    return liftF(new ComponentTextSig(sig, unit));
  };
  var text5 = function($72) {
    return textSig(pure6($72));
  };
  var foldComponentM = function(dictMonadRec) {
    var foldFree2 = foldFree(dictMonadRec);
    return function(f) {
      return function(v) {
        return foldFree2(f)(v);
      };
    };
  };

  // output/Jelly.Hooks/index.js
  var monoidEffect2 = /* @__PURE__ */ monoidEffect(monoidUnit);
  var semigroupEffect2 = /* @__PURE__ */ semigroupEffect(semigroupUnit);
  var discard3 = /* @__PURE__ */ discard(discardUnit);
  var mapFlipped3 = /* @__PURE__ */ mapFlipped(functorSignal);
  var map6 = /* @__PURE__ */ map(functorSignal);
  var applySecond2 = /* @__PURE__ */ applySecond(applyEffect);
  var mempty3 = /* @__PURE__ */ mempty(monoidEffect2);
  var writeChannel2 = /* @__PURE__ */ writeChannel(monadEffectEffect);
  var liftEffect4 = /* @__PURE__ */ liftEffect(monadEffectEffect);
  var lift4 = /* @__PURE__ */ lift(monadTransReaderT);
  var join2 = /* @__PURE__ */ join(bindSignal);
  var tell2 = /* @__PURE__ */ tell(/* @__PURE__ */ monadTellWriterT(monoidEffect2)(monadEffect));
  var monadRecHooks = /* @__PURE__ */ monadRecWriterT(monoidEffect2)(monadRecEffect);
  var monadEffectHooks = /* @__PURE__ */ monadEffectWriter(monoidEffect2)(monadEffectEffect);
  var memoSignal2 = /* @__PURE__ */ memoSignal(monadEffectHooks);
  var bindHooks = /* @__PURE__ */ bindWriterT(semigroupEffect2)(bindEffect);
  var bind2 = /* @__PURE__ */ bind(bindHooks);
  var discard23 = /* @__PURE__ */ discard3(bindHooks);
  var applicativeHooks = /* @__PURE__ */ applicativeWriterT(monoidEffect2)(applicativeEffect);
  var pure12 = /* @__PURE__ */ pure(applicativeHooks);
  var useHooks = function(dict) {
    return dict.useHooks;
  };
  var useHooks_ = function(dictMonadHooks) {
    var void1 = $$void(dictMonadHooks.MonadEffect0().Monad0().Bind1().Apply0().Functor0());
    var useHooks1 = useHooks(dictMonadHooks);
    return function(sig) {
      return void1(useHooks1(sig));
    };
  };
  var useUpdate = function(dictMonadHooks) {
    var MonadEffect0 = dictMonadHooks.MonadEffect0();
    var bind3 = bind(MonadEffect0.Monad0().Bind1());
    var liftEffect22 = liftEffect(MonadEffect0);
    var useHooks_1 = useHooks_(dictMonadHooks);
    return function(sig) {
      return bind3(liftEffect22($$new(true)))(function(isInit) {
        return useHooks_1(mapFlipped3(sig)(function(eff) {
          return bind3(liftEffect22(read(isInit)))(function(init) {
            if (init) {
              return liftEffect22(applySecond2(write(false)(isInit))(mempty3));
            }
            ;
            return eff;
          });
        }));
      });
    };
  };
  var useCleaner = function(dict) {
    return dict.useCleaner;
  };
  var useSubscriber = function(dictMonadHooks) {
    var MonadEffect0 = dictMonadHooks.MonadEffect0();
    var Monad0 = MonadEffect0.Monad0();
    var Bind1 = Monad0.Bind1();
    var bind3 = bind(Bind1);
    var newState2 = newState(MonadEffect0);
    var pure23 = pure(Monad0.Applicative0());
    var liftEffect22 = liftEffect(MonadEffect0);
    var applySecond1 = applySecond(Bind1.Apply0());
    var discard32 = discard3(Bind1);
    var useCleaner1 = useCleaner(dictMonadHooks);
    var useHooks_1 = useHooks_(dictMonadHooks);
    return function(subscribe2) {
      return function(handler) {
        return bind3(newState2(pure23(unit)))(function(v) {
          return bind3(liftEffect22(subscribe2(function(e) {
            return writeChannel2(v.value1)(applySecond1(handler(e))(pure23(unit)));
          })))(function(sub2) {
            return discard32(useCleaner1(sub2))(function() {
              return useHooks_1(v.value0);
            });
          });
        });
      };
    };
  };
  var useEvent = function(dictMonadHooks) {
    var useSubscriber1 = useSubscriber(dictMonadHooks);
    return function(target5) {
      return function(eventType) {
        return function(handler) {
          var subscribe2 = function(callback) {
            return function __do() {
              var el = liftEffect4(eventListener(callback))();
              liftEffect4(addEventListener(eventType)(el)(false)(target5))();
              return removeEventListener(eventType)(el)(false)(target5);
            };
          };
          return useSubscriber1(subscribe2)(handler);
        };
      };
    };
  };
  var monadHooksReaderT = function(dictMonadHooks) {
    var MonadEffect0 = dictMonadHooks.MonadEffect0();
    var Monad0 = MonadEffect0.Monad0();
    var lift12 = lift4(Monad0);
    var bind3 = bind(bindReaderT(Monad0.Bind1()));
    var ask2 = ask(monadAskReaderT(Monad0));
    var useHooks1 = useHooks(dictMonadHooks);
    var monadEffectReader2 = monadEffectReader(MonadEffect0);
    return {
      useCleaner: function() {
        var $237 = useCleaner(dictMonadHooks);
        return function($238) {
          return lift12($237($238));
        };
      }(),
      useHooks: function(sig) {
        return bind3(ask2)(function(r) {
          return lift12(useHooks1(map6(flip(runReaderT)(r))(sig)));
        });
      },
      MonadEffect0: function() {
        return monadEffectReader2;
      }
    };
  };
  var monadHooksWriterTSignal = function(dictMonadHooks) {
    var MonadEffect0 = dictMonadHooks.MonadEffect0();
    var Monad0 = MonadEffect0.Monad0();
    var useCleaner1 = useCleaner(dictMonadHooks);
    var Bind1 = Monad0.Bind1();
    var useHooks1 = useHooks(dictMonadHooks);
    var Applicative0 = Monad0.Applicative0();
    return function(dictMonoid) {
      var monoidSignal3 = monoidSignal(dictMonoid);
      var lift12 = lift(monadTransWriterT(monoidSignal3))(Monad0);
      var bindWriterT3 = bindWriterT(semigroupSignal(dictMonoid.Semigroup0()))(Bind1);
      var bind3 = bind(bindWriterT3);
      var discard32 = discard3(bindWriterT3);
      var tell1 = tell(monadTellWriterT(monoidSignal3)(Monad0));
      var pure23 = pure(applicativeWriterT(monoidSignal3)(Applicative0));
      var monadEffectWriter3 = monadEffectWriter(monoidSignal3)(MonadEffect0);
      return {
        useCleaner: function($239) {
          return lift12(useCleaner1($239));
        },
        useHooks: function(sig) {
          return bind3(lift12(useHooks1(map6(runWriterT)(sig))))(function(sigAW) {
            return discard32(tell1(join2(map6(snd)(sigAW))))(function() {
              return pure23(map6(fst)(sigAW));
            });
          });
        },
        MonadEffect0: function() {
          return monadEffectWriter3;
        }
      };
    };
  };
  var runHooks = function(dictMonadEffect) {
    var liftEffect22 = liftEffect(dictMonadEffect);
    return function(v) {
      return liftEffect22(runWriterT(v));
    };
  };
  var runHooks1 = /* @__PURE__ */ runHooks(monadEffectEffect);
  var runHooks_ = function(dictMonadEffect) {
    var void1 = $$void(dictMonadEffect.Monad0().Bind1().Apply0().Functor0());
    var runHooks2 = runHooks(dictMonadEffect);
    return function(m) {
      return void1(runHooks2(m));
    };
  };
  var monadHooksHooks = {
    useCleaner: function(cleaner) {
      return tell2(cleaner);
    },
    useHooks: function(sig) {
      return bind2(memoSignal2(mapFlipped3(sig)(function(h) {
        return runHooks1(h);
      })))(function(v) {
        return discard23(tell2(v.value1))(function() {
          return pure12(v.value0);
        });
      });
    },
    MonadEffect0: function() {
      return monadEffectHooks;
    }
  };

  // output/Jelly.Hydrate/foreign.js
  var createDocumentType = (name16) => (publicId2) => (systemId2) => (doc) => () => doc.implementation.createDocumentType(name16, publicId2, systemId2);
  var convertInnerHtmlToNodes = (innerHtml) => () => {
    const div2 = document.createElement("div");
    div2.innerHTML = innerHtml;
    return Array.from(div2.childNodes);
  };
  var updateChildren = (elem2) => (children2) => () => {
    const prevNodes = Array.from(elem2.childNodes);
    const nodesSet = new Set(children2);
    const nodesToRemove = prevNodes.filter((node) => !nodesSet.has(node));
    nodesToRemove.forEach((node) => elem2.removeChild(node));
    let itrNode = elem2.firstChild;
    for (const node of children2) {
      if (itrNode === node) {
        itrNode = itrNode.nextSibling;
        continue;
      }
      if (itrNode === null) {
        elem2.appendChild(node);
        continue;
      }
      elem2.insertBefore(node, itrNode);
    }
  };

  // output/Data.Exists/index.js
  var runExists = unsafeCoerce2;
  var mkExists = unsafeCoerce2;

  // output/Control.Monad.Free.Trans/index.js
  var bimap2 = /* @__PURE__ */ bimap(bifunctorEither);
  var Bound = /* @__PURE__ */ function() {
    function Bound2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    Bound2.create = function(value0) {
      return function(value1) {
        return new Bound2(value0, value1);
      };
    };
    return Bound2;
  }();
  var FreeT = /* @__PURE__ */ function() {
    function FreeT2(value0) {
      this.value0 = value0;
    }
    ;
    FreeT2.create = function(value0) {
      return new FreeT2(value0);
    };
    return FreeT2;
  }();
  var Bind2 = /* @__PURE__ */ function() {
    function Bind3(value0) {
      this.value0 = value0;
    }
    ;
    Bind3.create = function(value0) {
      return new Bind3(value0);
    };
    return Bind3;
  }();
  var monadTransFreeT = function(dictFunctor) {
    return {
      lift: function(dictMonad) {
        var map12 = map(dictMonad.Bind1().Apply0().Functor0());
        return function(ma) {
          return new FreeT(function(v) {
            return map12(Left.create)(ma);
          });
        };
      }
    };
  };
  var bound = function(m) {
    return function(f) {
      return new Bind2(mkExists(new Bound(m, f)));
    };
  };
  var functorFreeT = function(dictFunctor) {
    var map12 = map(dictFunctor);
    return function(dictFunctor1) {
      var map22 = map(dictFunctor1);
      return {
        map: function(v) {
          return function(v1) {
            if (v1 instanceof FreeT) {
              return new FreeT(function(v2) {
                return map22(bimap2(v)(map12(map(functorFreeT(dictFunctor)(dictFunctor1))(v))))(v1.value0(unit));
              });
            }
            ;
            if (v1 instanceof Bind2) {
              return runExists(function(v2) {
                return bound(v2.value0)(function() {
                  var $255 = map(functorFreeT(dictFunctor)(dictFunctor1))(v);
                  return function($256) {
                    return $255(v2.value1($256));
                  };
                }());
              })(v1.value0);
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 64, column 1 - line 66, column 71): " + [v.constructor.name, v1.constructor.name]);
          };
        }
      };
    };
  };
  var monadFreeT = function(dictFunctor) {
    return function(dictMonad) {
      return {
        Applicative0: function() {
          return applicativeFreeT(dictFunctor)(dictMonad);
        },
        Bind1: function() {
          return bindFreeT(dictFunctor)(dictMonad);
        }
      };
    };
  };
  var bindFreeT = function(dictFunctor) {
    return function(dictMonad) {
      return {
        bind: function(v) {
          return function(v1) {
            if (v instanceof Bind2) {
              return runExists(function(v2) {
                return bound(v2.value0)(function(x) {
                  return bound(function(v3) {
                    return v2.value1(x);
                  })(v1);
                });
              })(v.value0);
            }
            ;
            return bound(function(v2) {
              return v;
            })(v1);
          };
        },
        Apply0: function() {
          return applyFreeT(dictFunctor)(dictMonad);
        }
      };
    };
  };
  var applyFreeT = function(dictFunctor) {
    var functorFreeT1 = functorFreeT(dictFunctor);
    return function(dictMonad) {
      var functorFreeT2 = functorFreeT1(dictMonad.Bind1().Apply0().Functor0());
      return {
        apply: ap(monadFreeT(dictFunctor)(dictMonad)),
        Functor0: function() {
          return functorFreeT2;
        }
      };
    };
  };
  var applicativeFreeT = function(dictFunctor) {
    return function(dictMonad) {
      var pure8 = pure(dictMonad.Applicative0());
      return {
        pure: function(a) {
          return new FreeT(function(v) {
            return pure8(new Left(a));
          });
        },
        Apply0: function() {
          return applyFreeT(dictFunctor)(dictMonad);
        }
      };
    };
  };
  var resume = function(dictFunctor) {
    var map12 = map(dictFunctor);
    var bindFreeT1 = bindFreeT(dictFunctor);
    return function(dictMonadRec) {
      var Monad0 = dictMonadRec.Monad0();
      var Bind1 = Monad0.Bind1();
      var map22 = map(Bind1.Apply0().Functor0());
      var bind3 = bind(Bind1);
      var pure8 = pure(Monad0.Applicative0());
      var bind12 = bind(bindFreeT1(Monad0));
      var go2 = function(v) {
        if (v instanceof FreeT) {
          return map22(Done.create)(v.value0(unit));
        }
        ;
        if (v instanceof Bind2) {
          return runExists(function(v1) {
            var v2 = v1.value0(unit);
            if (v2 instanceof FreeT) {
              return bind3(v2.value0(unit))(function(v3) {
                if (v3 instanceof Left) {
                  return pure8(new Loop(v1.value1(v3.value0)));
                }
                ;
                if (v3 instanceof Right) {
                  return pure8(new Done(new Right(map12(function(h) {
                    return bind12(h)(v1.value1);
                  })(v3.value0))));
                }
                ;
                throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 57, column 22 - line 59, column 69): " + [v3.constructor.name]);
              });
            }
            ;
            if (v2 instanceof Bind2) {
              return runExists(function(v3) {
                return pure8(new Loop(bind12(v3.value0(unit))(function(z) {
                  return bind12(v3.value1(z))(v1.value1);
                })));
              })(v2.value0);
            }
            ;
            throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 55, column 7 - line 62, column 60): " + [v2.constructor.name]);
          })(v.value0);
        }
        ;
        throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 51, column 3 - line 51, column 75): " + [v.constructor.name]);
      };
      return tailRecM(dictMonadRec)(go2);
    };
  };
  var runFreeT = function(dictFunctor) {
    var resume1 = resume(dictFunctor);
    return function(dictMonadRec) {
      var Monad0 = dictMonadRec.Monad0();
      var pure8 = pure(Monad0.Applicative0());
      var Bind1 = Monad0.Bind1();
      var map12 = map(Bind1.Apply0().Functor0());
      var tailRecM3 = tailRecM(dictMonadRec);
      var composeKleisliFlipped2 = composeKleisliFlipped(Bind1);
      var resume2 = resume1(dictMonadRec);
      return function(interp) {
        var go2 = function(v) {
          if (v instanceof Left) {
            return pure8(new Done(v.value0));
          }
          ;
          if (v instanceof Right) {
            return map12(Loop.create)(interp(v.value0));
          }
          ;
          throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 144, column 3 - line 144, column 63): " + [v.constructor.name]);
        };
        return tailRecM3(composeKleisliFlipped2(go2)(resume2));
      };
    };
  };
  var monadRecFreeT = function(dictFunctor) {
    var bindFreeT1 = bindFreeT(dictFunctor);
    var applicativeFreeT1 = applicativeFreeT(dictFunctor);
    var monadFreeT1 = monadFreeT(dictFunctor);
    return function(dictMonad) {
      var bind3 = bind(bindFreeT1(dictMonad));
      var pure8 = pure(applicativeFreeT1(dictMonad));
      var monadFreeT2 = monadFreeT1(dictMonad);
      return {
        tailRecM: function(f) {
          var go2 = function(s) {
            return bind3(f(s))(function(v) {
              if (v instanceof Loop) {
                return go2(v.value0);
              }
              ;
              if (v instanceof Done) {
                return pure8(v.value0);
              }
              ;
              throw new Error("Failed pattern match at Control.Monad.Free.Trans (line 87, column 15 - line 89, column 25): " + [v.constructor.name]);
            });
          };
          return go2;
        },
        Monad0: function() {
          return monadFreeT2;
        }
      };
    };
  };

  // output/Control.Safely/index.js
  var runFreeT2 = /* @__PURE__ */ runFreeT(functorIdentity);
  var unwrap2 = /* @__PURE__ */ unwrap();
  var monadRecFreeT2 = /* @__PURE__ */ monadRecFreeT(functorIdentity);
  var lift5 = /* @__PURE__ */ lift(/* @__PURE__ */ monadTransFreeT(functorIdentity));
  var safely = function(dictMonadRec) {
    var Monad0 = dictMonadRec.Monad0();
    var monadRecFreeT1 = monadRecFreeT2(Monad0);
    var lift12 = lift5(Monad0);
    return function(f) {
      var lower = function(dictMonadRec1) {
        return runFreeT2(dictMonadRec1)(function() {
          var $56 = pure(dictMonadRec1.Monad0().Applicative0());
          return function($57) {
            return $56(unwrap2($57));
          };
        }());
      };
      var lower1 = lower(dictMonadRec);
      return lower1(f(monadRecFreeT1)(lift12)(lower1));
    };
  };
  var traverse_2 = function(dictFoldable) {
    return function(dictMonadRec) {
      var safely1 = safely(dictMonadRec);
      return function(f) {
        return function(xs) {
          return safely1(function(dictMonadRec1) {
            var traverse_1 = traverse_(dictMonadRec1.Monad0().Applicative0())(dictFoldable);
            return function(lift12) {
              return function(v) {
                return traverse_1(function($58) {
                  return lift12(f($58));
                })(xs);
              };
            };
          });
        };
      };
    };
  };
  var for_2 = function(dictFoldable) {
    var traverse_1 = traverse_2(dictFoldable);
    return function(dictMonadRec) {
      return flip(traverse_1(dictMonadRec));
    };
  };

  // output/Data.Array/foreign.js
  var replicateFill = function(count, value12) {
    if (count < 1) {
      return [];
    }
    var result = new Array(count);
    return result.fill(value12);
  };
  var replicatePolyfill = function(count, value12) {
    var result = [];
    var n = 0;
    for (var i = 0; i < count; i++) {
      result[n++] = value12;
    }
    return result;
  };
  var replicateImpl = typeof Array.prototype.fill === "function" ? replicateFill : replicatePolyfill;

  // output/Jelly.Prop/index.js
  var PropAttribute = /* @__PURE__ */ function() {
    function PropAttribute2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    PropAttribute2.create = function(value0) {
      return function(value1) {
        return new PropAttribute2(value0, value1);
      };
    };
    return PropAttribute2;
  }();
  var PropHandler = /* @__PURE__ */ function() {
    function PropHandler2(value0, value1) {
      this.value0 = value0;
      this.value1 = value1;
    }
    ;
    PropHandler2.create = function(value0) {
      return function(value1) {
        return new PropHandler2(value0, value1);
      };
    };
    return PropHandler2;
  }();
  var PropMountEffect = /* @__PURE__ */ function() {
    function PropMountEffect2(value0) {
      this.value0 = value0;
    }
    ;
    PropMountEffect2.create = function(value0) {
      return new PropMountEffect2(value0);
    };
    return PropMountEffect2;
  }();

  // output/Web.DOM.Document/foreign.js
  var getEffProp2 = function(name16) {
    return function(doc) {
      return function() {
        return doc[name16];
      };
    };
  };
  var url = getEffProp2("URL");
  var documentURI = getEffProp2("documentURI");
  var origin2 = getEffProp2("origin");
  var compatMode = getEffProp2("compatMode");
  var characterSet = getEffProp2("characterSet");
  var contentType = getEffProp2("contentType");
  var _documentElement2 = getEffProp2("documentElement");
  function createElement(localName2) {
    return function(doc) {
      return function() {
        return doc.createElement(localName2);
      };
    };
  }
  function _createElementNS(ns) {
    return function(qualifiedName) {
      return function(doc) {
        return function() {
          return doc.createElementNS(ns, qualifiedName);
        };
      };
    };
  }
  function createTextNode(data) {
    return function(doc) {
      return function() {
        return doc.createTextNode(data);
      };
    };
  }

  // output/Web.DOM.Document/index.js
  var createElementNS = function($6) {
    return _createElementNS(toNullable($6));
  };

  // output/Web.DOM.DocumentType/foreign.js
  var getProp2 = function(name16) {
    return function(doctype) {
      return doctype[name16];
    };
  };
  var name15 = getProp2("name");
  var publicId = getProp2("publicId");
  var systemId = getProp2("systemId");

  // output/Web.DOM.DocumentType/index.js
  var toNode4 = unsafeCoerce2;
  var fromNode2 = /* @__PURE__ */ unsafeReadProtoTagged("DocumentType");

  // output/Web.DOM.Node/foreign.js
  var getEffProp3 = function(name16) {
    return function(node) {
      return function() {
        return node[name16];
      };
    };
  };
  var baseURI = getEffProp3("baseURI");
  var _ownerDocument = getEffProp3("ownerDocument");
  var _parentNode = getEffProp3("parentNode");
  var _parentElement = getEffProp3("parentElement");
  var childNodes = getEffProp3("childNodes");
  var _firstChild = getEffProp3("firstChild");
  var _lastChild = getEffProp3("lastChild");
  var _previousSibling = getEffProp3("previousSibling");
  var _nextSibling = getEffProp3("nextSibling");
  var _nodeValue = getEffProp3("nodeValue");
  var textContent = getEffProp3("textContent");
  function setTextContent(value12) {
    return function(node) {
      return function() {
        node.textContent = value12;
      };
    };
  }

  // output/Web.DOM.Node/index.js
  var map7 = /* @__PURE__ */ map(functorEffect);
  var nextSibling = /* @__PURE__ */ function() {
    var $15 = map7(toMaybe);
    return function($16) {
      return $15(_nextSibling($16));
    };
  }();
  var firstChild = /* @__PURE__ */ function() {
    var $25 = map7(toMaybe);
    return function($26) {
      return $25(_firstChild($26));
    };
  }();

  // output/Web.DOM.Text/index.js
  var toNode5 = unsafeCoerce2;
  var fromNode3 = /* @__PURE__ */ unsafeReadProtoTagged("Text");

  // output/Jelly.Hydrate/index.js
  var monoidSignal2 = /* @__PURE__ */ monoidSignal(monoidArray);
  var lift6 = /* @__PURE__ */ lift(monadTransReaderT);
  var monadWriterT2 = /* @__PURE__ */ monadWriterT(monoidSignal2);
  var lift1 = /* @__PURE__ */ lift(/* @__PURE__ */ monadTransWriterT(monoidSignal2));
  var monadTellWriterT2 = /* @__PURE__ */ monadTellWriterT(monoidSignal2);
  var monadRecWriterT2 = /* @__PURE__ */ monadRecWriterT(monoidSignal2);
  var monadEffectWriter2 = /* @__PURE__ */ monadEffectWriter(monoidSignal2);
  var semigroupSignal2 = /* @__PURE__ */ semigroupSignal(semigroupArray);
  var bindWriterT2 = /* @__PURE__ */ bindWriterT(semigroupSignal2);
  var applicativeWriterT2 = /* @__PURE__ */ applicativeWriterT(monoidSignal2);
  var mapFlipped4 = /* @__PURE__ */ mapFlipped(functorSignal);
  var traverse_3 = /* @__PURE__ */ traverse_2(foldableArray);
  var discard4 = /* @__PURE__ */ discard(discardUnit);
  var pure7 = /* @__PURE__ */ pure(applicativeSignal);
  var map8 = /* @__PURE__ */ map(functorEffect);
  var map1 = /* @__PURE__ */ map(functorSignal);
  var for_3 = /* @__PURE__ */ for_2(foldableArray)(monadRecEffect);
  var bindFlipped4 = /* @__PURE__ */ bindFlipped(bindEffect);
  var HydrateM = function(x) {
    return x;
  };
  var monadTransHydrateM = {
    lift: function(dictMonad) {
      var $233 = lift6(monadWriterT2(dictMonad));
      var $234 = lift1(dictMonad);
      return function($235) {
        return HydrateM($233($234($235)));
      };
    }
  };
  var lift24 = /* @__PURE__ */ lift(monadTransHydrateM);
  var monadTellSignalArrayNodeH = function(dictMonad) {
    return monadTellReaderT(monadTellWriterT2(dictMonad));
  };
  var monadRecHydrateM = function(dictMonadRec) {
    return monadRecReaderT(monadRecWriterT2(dictMonadRec));
  };
  var monadHooksHydrateM = function(dictMonadHooks) {
    return monadHooksReaderT(monadHooksWriterTSignal(dictMonadHooks)(monoidArray));
  };
  var monadEffectHydrateM = function(dictMonadEffect) {
    return monadEffectReader(monadEffectWriter2(dictMonadEffect));
  };
  var monadAskRefMaybeNodeHydra = function(dictMonad) {
    return monadAskReaderT(monadWriterT2(dictMonad));
  };
  var bindHydrateM = function(dictMonad) {
    return bindReaderT(bindWriterT2(dictMonad.Bind1()));
  };
  var applicativeHydrateM = function(dictMonad) {
    return applicativeReaderT(applicativeWriterT2(dictMonad.Applicative0()));
  };
  var runSignalRegister = function(dictMonadHooks) {
    var useHooks_2 = useHooks_(dictMonadHooks);
    var useUpdate2 = useUpdate(dictMonadHooks);
    return function(doInitialize) {
      if (doInitialize) {
        return useHooks_2;
      }
      ;
      return useUpdate2;
    };
  };
  var useRegisterChildren = function(dictMonadHooks) {
    var runSignalRegister1 = runSignalRegister(dictMonadHooks);
    var liftEffect6 = liftEffect(dictMonadHooks.MonadEffect0());
    return function(doInitialize) {
      return function(elem2) {
        return function(chlSig) {
          return runSignalRegister1(doInitialize)(mapFlipped4(chlSig)(function(chl) {
            return liftEffect6(updateChildren(elem2)(chl));
          }));
        };
      };
    };
  };
  var useRegisterProp = function(dictMonadHooks) {
    var runSignalRegister1 = runSignalRegister(dictMonadHooks);
    var liftEffect6 = liftEffect(dictMonadHooks.MonadEffect0());
    var useEvent2 = useEvent(dictMonadHooks);
    return function(doInitialize) {
      return function(element) {
        return function(v) {
          if (v instanceof PropAttribute) {
            return runSignalRegister1(doInitialize)(mapFlipped4(v.value1)(function(value12) {
              return liftEffect6(function() {
                if (value12 instanceof Nothing) {
                  return removeAttribute(v.value0)(element);
                }
                ;
                if (value12 instanceof Just) {
                  return setAttribute(v.value0)(value12.value0)(element);
                }
                ;
                throw new Error("Failed pattern match at Jelly.Hydrate (line 46, column 5 - line 48, column 44): " + [value12.constructor.name]);
              }());
            }));
          }
          ;
          if (v instanceof PropHandler) {
            return useEvent2(toEventTarget(element))(v.value0)(v.value1);
          }
          ;
          if (v instanceof PropMountEffect) {
            return v.value0(element);
          }
          ;
          throw new Error("Failed pattern match at Jelly.Hydrate (line 44, column 40 - line 52, column 19): " + [v.constructor.name]);
        };
      };
    };
  };
  var useRegisterProps = function(dictMonadHooks) {
    var useRegisterProp1 = useRegisterProp(dictMonadHooks);
    return function(dictMonadRec) {
      var traverse_1 = traverse_3(dictMonadRec);
      return function(doInitialize) {
        return function(element) {
          return function(props) {
            return traverse_1(useRegisterProp1(doInitialize)(element))(props);
          };
        };
      };
    };
  };
  var useRegisterText = function(dictMonadHooks) {
    var runSignalRegister1 = runSignalRegister(dictMonadHooks);
    var liftEffect6 = liftEffect(dictMonadHooks.MonadEffect0());
    return function(doInitialize) {
      return function(txt) {
        return function(txtSig) {
          return runSignalRegister1(doInitialize)(mapFlipped4(txtSig)(function(tx) {
            return liftEffect6(setTextContent(tx)(toNode5(txt)));
          }));
        };
      };
    };
  };
  var runHydrateM = function(dictMonad) {
    return function(v) {
      return function(ref) {
        return runWriterT(runReaderT(v)(ref));
      };
    };
  };
  var hydrateNode = function(dictMonadEffect) {
    var Monad0 = dictMonadEffect.Monad0();
    var bindHydrateM1 = bindHydrateM(Monad0);
    var bind12 = bind(bindHydrateM1);
    var ask2 = ask(monadAskRefMaybeNodeHydra(Monad0));
    var liftEffect6 = liftEffect(monadEffectHydrateM(dictMonadEffect));
    var discard1 = discard4(bindHydrateM1);
    var tell3 = tell(monadTellSignalArrayNodeH(Monad0));
    var pure13 = pure(applicativeHydrateM(Monad0));
    return function(convertTo) {
      return function(convertFrom) {
        return function(make) {
          return bind12(ask2)(function(realNodeRef) {
            return bind12(liftEffect6(read(realNodeRef)))(function(maybeNode) {
              var v = function(v1) {
                return bind12(liftEffect6(make))(function(a) {
                  return discard1(tell3(pure7([convertFrom(a)])))(function() {
                    return pure13(new Tuple(a, false));
                  });
                });
              };
              if (maybeNode instanceof Just) {
                var $188 = convertTo(maybeNode.value0);
                if ($188 instanceof Just) {
                  return bind12(liftEffect6(nextSibling(maybeNode.value0)))(function(ns) {
                    return discard1(liftEffect6(write(ns)(realNodeRef)))(function() {
                      return discard1(tell3(pure7([maybeNode.value0])))(function() {
                        return pure13(new Tuple($188.value0, true));
                      });
                    });
                  });
                }
                ;
                return v(true);
              }
              ;
              return v(true);
            });
          });
        };
      };
    };
  };
  var hydrateInterpreter = function(dictMonad) {
    var bindHydrateM1 = bindHydrateM(dictMonad);
    var bind12 = bind(bindHydrateM1);
    var discard1 = discard4(bindHydrateM1);
    var lift32 = lift24(dictMonad);
    var pure13 = pure(applicativeHydrateM(dictMonad));
    var ask2 = ask(monadAskRefMaybeNodeHydra(dictMonad));
    var tell3 = tell(monadTellSignalArrayNodeH(dictMonad));
    var bindFlipped1 = bindFlipped(bindHydrateM1);
    return function(dictMonadRec) {
      var foldComponentM2 = foldComponentM(monadRecHydrateM(dictMonadRec));
      return function(dictMonadHooks) {
        var MonadEffect0 = dictMonadHooks.MonadEffect0();
        var monadEffectHydrateM1 = monadEffectHydrateM(MonadEffect0);
        var liftEffect6 = liftEffect(monadEffectHydrateM1);
        var hydrateNode1 = hydrateNode(MonadEffect0);
        var useRegisterProps1 = useRegisterProps(dictMonadHooks)(dictMonadRec);
        var useRegisterText1 = useRegisterText(dictMonadHooks);
        var useHooks2 = useHooks(dictMonadHooks);
        var liftEffect1 = liftEffect(MonadEffect0);
        var readSignal2 = readSignal(monadEffectHydrateM1);
        var useHooks_2 = useHooks_(monadHooksHydrateM(dictMonadHooks));
        return function(componentF) {
          return bind12(liftEffect6(windowImpl))(function(w) {
            return bind12(liftEffect6(map8(toDocument)(document2(w))))(function(d) {
              if (componentF instanceof ComponentEl) {
                return bind12(hydrateNode1(fromNode)(toNode)(createElement(componentF.value0)(d)))(function(v) {
                  return discard1(lift32(hydrate(dictMonadHooks)(dictMonadRec)(componentF.value2)(toNode(v.value0))))(function() {
                    return discard1(lift32(useRegisterProps1(!v.value1)(v.value0)(componentF.value1)))(function() {
                      return pure13(componentF.value3);
                    });
                  });
                });
              }
              ;
              if (componentF instanceof ComponentElNS) {
                return bind12(hydrateNode1(fromNode)(toNode)(createElementNS(new Just(componentF.value0))(componentF.value1)(d)))(function(v) {
                  return discard1(lift32(hydrate(dictMonadHooks)(dictMonadRec)(componentF.value3)(toNode(v.value0))))(function() {
                    return discard1(lift32(useRegisterProps1(!v.value1)(v.value0)(componentF.value2)))(function() {
                      return pure13(componentF.value4);
                    });
                  });
                });
              }
              ;
              if (componentF instanceof ComponentElVoid) {
                return bind12(hydrateNode1(fromNode)(toNode)(createElement(componentF.value0)(d)))(function(v) {
                  return discard1(lift32(useRegisterProps1(!v.value1)(v.value0)(componentF.value1)))(function() {
                    return pure13(componentF.value2);
                  });
                });
              }
              ;
              if (componentF instanceof ComponentTextSig) {
                return bind12(hydrateNode1(fromNode3)(toNode5)(createTextNode("")(d)))(function(v) {
                  return discard1(lift32(useRegisterText1(!v.value1)(v.value0)(componentF.value0)))(function() {
                    return pure13(componentF.value1);
                  });
                });
              }
              ;
              if (componentF instanceof ComponentRawSig) {
                return bind12(ask2)(function(realNodeRef) {
                  return bind12(lift32(useHooks2(map1(function($236) {
                    return liftEffect1(convertInnerHtmlToNodes($236));
                  })(componentF.value0))))(function(nodesSig) {
                    var skipRef = function __do() {
                      var maybeNode = read(realNodeRef)();
                      if (maybeNode instanceof Just) {
                        var ns = nextSibling(maybeNode.value0)();
                        return write(ns)(realNodeRef)();
                      }
                      ;
                      if (maybeNode instanceof Nothing) {
                        return write(Nothing.value)(realNodeRef)();
                      }
                      ;
                      throw new Error("Failed pattern match at Jelly.Hydrate (line 150, column 11 - line 154, column 49): " + [maybeNode.constructor.name]);
                    };
                    return bind12(readSignal2(nodesSig))(function(nodes) {
                      return discard1(liftEffect6(for_3(nodes)(function(v) {
                        return skipRef;
                      })))(function() {
                        return discard1(tell3(nodesSig))(function() {
                          return pure13(componentF.value1);
                        });
                      });
                    });
                  });
                });
              }
              ;
              if (componentF instanceof ComponentDoctype) {
                return bind12(hydrateNode1(fromNode2)(toNode4)(createDocumentType(componentF.value0)(componentF.value1)(componentF.value2)(d)))(function() {
                  return pure13(componentF.value3);
                });
              }
              ;
              if (componentF instanceof ComponentHooks) {
                return discard1(bindFlipped1(foldComponentM2(hydrateInterpreter(dictMonad)(dictMonadRec)(dictMonadHooks)))(lift32(componentF.value0)))(function() {
                  return pure13(componentF.value1);
                });
              }
              ;
              if (componentF instanceof ComponentSwitch) {
                return discard1(useHooks_2(map1(foldComponentM2(hydrateInterpreter(dictMonad)(dictMonadRec)(dictMonadHooks)))(componentF.value0)))(function() {
                  return pure13(componentF.value1);
                });
              }
              ;
              throw new Error("Failed pattern match at Jelly.Hydrate (line 117, column 3 - line 174, column 13): " + [componentF.constructor.name]);
            });
          });
        };
      };
    };
  };
  var hydrate = function(dictMonadHooks) {
    var MonadEffect0 = dictMonadHooks.MonadEffect0();
    var Monad0 = MonadEffect0.Monad0();
    var bind12 = bind(Monad0.Bind1());
    var liftEffect6 = liftEffect(MonadEffect0);
    var runHydrateM1 = runHydrateM(Monad0);
    var useRegisterChildren1 = useRegisterChildren(dictMonadHooks);
    return function(dictMonadRec) {
      var foldComponentM2 = foldComponentM(monadRecHydrateM(dictMonadRec));
      return function(component2) {
        return function(node) {
          return bind12(liftEffect6(bindFlipped4($$new)(firstChild(node))))(function(realNodeRef) {
            return bind12(runHydrateM1(foldComponentM2(hydrateInterpreter(Monad0)(dictMonadRec)(dictMonadHooks))(component2))(realNodeRef))(function(v) {
              return useRegisterChildren1(true)(node)(v.value1);
            });
          });
        };
      };
    };
  };
  var mount = function(dictMonadHooks) {
    var MonadEffect0 = dictMonadHooks.MonadEffect0();
    var discard1 = discard4(MonadEffect0.Monad0().Bind1());
    var liftEffect6 = liftEffect(MonadEffect0);
    var hydrate1 = hydrate(dictMonadHooks);
    return function(dictMonadRec) {
      var hydrate2 = hydrate1(dictMonadRec);
      return function(cmp) {
        return function(node) {
          return discard1(liftEffect6(updateChildren(node)([])))(function() {
            return hydrate2(cmp)(node);
          });
        };
      };
    };
  };

  // output/Main/index.js
  var liftEffect5 = /* @__PURE__ */ liftEffect(monadEffectAff);
  var runHooks_2 = /* @__PURE__ */ runHooks_(monadEffectEffect);
  var traverse_4 = /* @__PURE__ */ traverse_(applicativeHooks)(foldableMaybe);
  var mount2 = /* @__PURE__ */ mount(monadHooksHooks)(monadRecHooks);
  var component = /* @__PURE__ */ text5("Hello World!");
  var main = /* @__PURE__ */ launchAff_(/* @__PURE__ */ bind(bindAff)(awaitBody)(function(appMaybe) {
    return liftEffect5(runHooks_2(traverse_4(mount2(component))(appMaybe)));
  }));

  // <stdin>
  main();
})();
